// AUTOGENERATED, DO NOT EDIT

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CometBackup.CometAPI.SDK {
/// <summary>
/// Class <c>UpdateCampaignProperties</c>
/// </summary>
public class UpdateCampaignProperties {

	[JsonPropertyName("Active")]
	public bool Active { get; set; }

	[JsonPropertyName("UpgradeOlder")]
	public bool UpgradeOlder { get; set; }

	[JsonPropertyName("ReinstallCurrentVer")]
	public bool ReinstallCurrentVer { get; set; }

	[JsonPropertyName("DowngradeNewer")]
	public bool DowngradeNewer { get; set; }

	[JsonPropertyName("ForceUpgradeRunning")]
	//Choose whether this bulk upgrade campaign is allowed to interrupt a running backup job.
	public bool ForceUpgradeRunning { get; set; }

	[JsonPropertyName("ApplyDeviceFilter")]
	//If true, then the UserFilter will be used to restrict which accounts and devices will be eligible for the software
	//update. If false, all users and devices will be eligible for the software update.
	public bool ApplyDeviceFilter { get; set; }

	[JsonPropertyName("DeviceFilter")]
	public SearchClause DeviceFilter { get; set; }

	[JsonPropertyName("StartTime")]
	//Unix timestamp, in seconds
	public long StartTime { get; set; }

	[JsonPropertyName("TargetVersion")]
	public string TargetVersion { get; set; } = string.Empty;

	public UpdateCampaignProperties(){ }

	public string ToJson() {
		return JsonSerializer.Serialize(this);
	}

	static public UpdateCampaignProperties FromJson(string jsStr) {
		return JsonSerializer.Deserialize<UpdateCampaignProperties>(jsStr);
	}

	public UpdateCampaignOptions GetEmbeddedUpdateCampaignOptions() => new UpdateCampaignOptions {
		Active = this.Active,
		UpgradeOlder = this.UpgradeOlder,
		ReinstallCurrentVer = this.ReinstallCurrentVer,
		DowngradeNewer = this.DowngradeNewer,
		ForceUpgradeRunning = this.ForceUpgradeRunning,
		ApplyDeviceFilter = this.ApplyDeviceFilter,
		DeviceFilter = this.DeviceFilter,
	};

	public void SetEmbeddedUpdateCampaignOptions(UpdateCampaignOptions other){
		this.Active = other.Active;
		this.UpgradeOlder = other.UpgradeOlder;
		this.ReinstallCurrentVer = other.ReinstallCurrentVer;
		this.DowngradeNewer = other.DowngradeNewer;
		this.ForceUpgradeRunning = other.ForceUpgradeRunning;
		this.ApplyDeviceFilter = other.ApplyDeviceFilter;
		this.DeviceFilter = other.DeviceFilter;
	}

}
}
