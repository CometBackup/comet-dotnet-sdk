// AUTOGENERATED, DO NOT EDIT

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CometBackup.CometAPI.SDK {
/// <summary>
/// Class <c>ServerConfigOptions</c>
/// </summary>
public class ServerConfigOptions {
	public List<AllowedAdminUser> AdminUsers { get; set; } = new List<AllowedAdminUser>();
	public AuthenticationRoleOptions AuthenticationRole { get; set; } = new AuthenticationRoleOptions();
	public BrandingOptions Branding { get; set; } = new BrandingOptions();
	public ConstellationRoleOptions ConstellationRole { get; set; } = new ConstellationRoleOptions();

	[JsonPropertyName("OverseerRole")]
	public ConstellationRoleOptions ConstellationRole_Legacy { get; set; } = new ConstellationRoleOptions();
	public EmailOptions Email { get; set; } = new EmailOptions();
	public List<string> ExperimentalOptions { get; set; } = new List<string>();
	public Dictionary<string, ExternalAuthenticationSource> ExternalAdminUserSources { get; set; } = new Dictionary<string, ExternalAuthenticationSource>();
	public RatelimitOptions IPRateLimit { get; set; } = new RatelimitOptions();
	public LicenseOptions License { get; set; } = new LicenseOptions();
	public List<HTTPConnectorOptions> ListenAddresses { get; set; } = new List<HTTPConnectorOptions>();
	public Dictionary<string, Organization> Organizations { get; set; } = new Dictionary<string, Organization>();
	public List<PSAConfig> PSAConfigs { get; set; } = new List<PSAConfig>();
	public SelfBackupOptions SelfBackup { get; set; } = new SelfBackupOptions();
	public SessionOptions SessionSettings { get; set; } = new SessionOptions();
	public SoftwareBuildRoleOptions SoftwareBuildRole { get; set; } = new SoftwareBuildRoleOptions();
	public StorageRoleOptions StorageRole { get; set; } = new StorageRoleOptions();
	public bool TrustXForwardedFor { get; set; }
	public Dictionary<string, WebhookOption> WebhookOptions { get; set; } = new Dictionary<string, WebhookOption>();

	public ServerConfigOptions(){ }

	public string ToJson() {
		return JsonSerializer.Serialize(this);
	}

	static public ServerConfigOptions FromJson(string jsStr) {
		return JsonSerializer.Deserialize<ServerConfigOptions>(jsStr);
	}

}
}
