// AUTOGENERATED, DO NOT EDIT

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CometBackup.CometAPI.SDK {
/// <summary>
/// Class <c>ImpossibleCloudPartnerTemplateSettings</c>
/// Since Version : 24.3.1
/// </summary>
public class ImpossibleCloudPartnerTemplateSettings {

	[JsonPropertyName("Region")]
	//Optional. The region for your Partner console and for provisioning new buckets. If blank, uses the default region for
	//Impossible Cloud (eu-central-2).
	public string Region { get; set; } = string.Empty;

	[JsonPropertyName("AccessKey")]
	public string AccessKey { get; set; } = string.Empty;

	[Obsolete("Deprecated since Comet version 23.x.x")]

	[JsonPropertyName("UseObjectLock")]
	public bool UseObjectLock_Legacy_DoNotUse { get; set; }

	[JsonPropertyName("ObjectLockMode")]
	//Control whether the resulting Storage Vaults are configured for Object Lock. One of the OBJECT_LOCK_ constants
	public byte ObjectLockMode { get; set; }

	[JsonPropertyName("ObjectLockDays")]
	public long ObjectLockDays { get; set; }

	[JsonPropertyName("RemoveDeleted")]
	//Control whether the "Allow removal of deleted files" checkbox is enabled for Storage Vaults generated from this
	//Storage Template.
	//When configuring a Storage Template from the Comet Server web interface, this field is set automatically for Storage
	//Templates using Object Lock.
	public bool RemoveDeleted { get; set; }

	public ImpossibleCloudPartnerTemplateSettings(){ }

	public string ToJson() {
		return JsonSerializer.Serialize(this);
	}

	static public ImpossibleCloudPartnerTemplateSettings FromJson(string jsStr) {
		return JsonSerializer.Deserialize<ImpossibleCloudPartnerTemplateSettings>(jsStr);
	}

	public ObjectLockStorageTemplateSettings GetEmbeddedObjectLockStorageTemplateSettings() => new ObjectLockStorageTemplateSettings {
		UseObjectLock_Legacy_DoNotUse = this.UseObjectLock_Legacy_DoNotUse,
		ObjectLockMode = this.ObjectLockMode,
		ObjectLockDays = this.ObjectLockDays,
		RemoveDeleted = this.RemoveDeleted,
	};

	public void SetEmbeddedObjectLockStorageTemplateSettings(ObjectLockStorageTemplateSettings other){
		this.UseObjectLock_Legacy_DoNotUse = other.UseObjectLock_Legacy_DoNotUse;
		this.ObjectLockMode = other.ObjectLockMode;
		this.ObjectLockDays = other.ObjectLockDays;
		this.RemoveDeleted = other.RemoveDeleted;
	}

}
}
