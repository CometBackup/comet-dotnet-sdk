
// AUTOGENERATED, DO NOT EDIT

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Threading.Tasks;

namespace CometBackup.CometAPI.SDK {

/// <summary>
/// Class <c>CometAPI</c>
/// Provides access to the Comet API
/// </summary>
public class CometAPI : IDisposable {
	public string ServerURL;
	public string Username;
	public string Password;
	private HttpClient _client;

	/// <summary>
	/// Creates an access point for the Comet API. An HttpClient is created and managed automatically.
	/// <param name="serverURL">Address of Comet server to connect to</param>
	/// <param name="username">Username on Comet server</param>
	/// <param name="password">Password on Comet server</param>
	/// </summary>
	public CometAPI(string serverURL, string username, string password) :
		this(serverURL, username, password, new HttpClient()) { }

	// public CometAPI(string serverURL, string username, string password, SocketsHttpHandler handler) :
	//	this(serverURL, username, password, new HttpClient(handler)) { }

	/// <summary>
	/// Creates an access point for the Comet API. An HttpClient is supplied by client code, 
	/// which this class takes ownership of (it will be Disposed when the CometAPI object
	/// is Disposed)
	/// <param name="serverURL">Address of Comet server to connect to</param>
	/// <param name="username">Username on Comet server</param>
	/// <param name="password">Password on Comet server</param>
	/// <param name="client">HttpClient used to access the Comet server. Will be cleaned up on Dispose</param>
	/// </summary>
	public CometAPI(string serverURL, string username, string password, HttpClient client) {
		ServerURL = serverURL;
		Username  = username;
		Password  = password;
		_client = new HttpClient();
	}

	public void Dispose() {
		_client.Dispose();
	}

	private async Task<HttpResponseMessage> Request(string contentType, HttpMethod method, string path, Dictionary<string, string> data) {
		UriBuilder uriBuilder = new UriBuilder(ServerURL);
		if(path.StartsWith("/")) path = path.Substring(1);
		uriBuilder.Path += path;
		data = data ?? new Dictionary<string, string>();

		var request = new HttpRequestMessage(method, uriBuilder.ToString());

		switch(contentType) {
			case "application/x-www-form-urlencoded":
				data["AuthType"] = "Password";
				data["Username"] = Username;
				data["Password"] = Password;

				request.Content = new FormUrlEncodedContent(data);
				request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);
				break;

			case "multipart/form-data":
				MultipartFormDataContent form = new MultipartFormDataContent();
				
				form.Headers.Add("X-Comet-Admin-AuthType", "Password");
				form.Headers.Add("X-Comet-Admin-Username", Username);
				form.Headers.Add("X-Comet-Admin-Password", Password);
				
				foreach (var pair in data) {
					form.Add(new StringContent(pair.Value), pair.Key);                        
				}
				request.Content = form;
				break;

			default:
				throw new ArgumentException("Unexpected content type: " + contentType, nameof(contentType));
		}

		return await _client.SendAsync(request);
	}

	//
	// DEFAULT CLIENT METHODS
	//

	/// <summary>
	/// AdminAccountPropertiesAsync: Retrieve properties about the current admin account
	/// Some key parameters are obscured, but the obscured values are safely recognised by the corresponding
	/// AdminAccountSetProperties API.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public async Task<AdminAccountPropertiesResponse> AdminAccountPropertiesAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/properties", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<AdminAccountPropertiesResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountProperties: Retrieve properties about the current admin account
	/// Some key parameters are obscured, but the obscured values are safely recognised by the corresponding
	/// AdminAccountSetProperties API.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public AdminAccountPropertiesResponse AdminAccountProperties() {
		var resultTask = AdminAccountPropertiesAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountRegenerateTotpAsync: Generate a new TOTP secret
	/// The secret is returned as a `data-uri` image of a QR code. The new secret is immediately applied to the current
	/// admin account.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public async Task<TotpRegeneratedResponse> AdminAccountRegenerateTotpAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/regenerate-totp", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<TotpRegeneratedResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountRegenerateTotp: Generate a new TOTP secret
	/// The secret is returned as a `data-uri` image of a QR code. The new secret is immediately applied to the current
	/// admin account.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public TotpRegeneratedResponse AdminAccountRegenerateTotp() {
		var resultTask = AdminAccountRegenerateTotpAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountSessionRevokeAsync: Revoke a session key (log out)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public async Task<CometAPIResponseMessage> AdminAccountSessionRevokeAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/session-revoke", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountSessionRevoke: Revoke a session key (log out)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public CometAPIResponseMessage AdminAccountSessionRevoke() {
		var resultTask = AdminAccountSessionRevokeAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountSessionStartAsync: Generate a session key (log in)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">(Optional) External URL of this server</param>
	public async Task<SessionKeyRegeneratedResponse> AdminAccountSessionStartAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/session-start", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<SessionKeyRegeneratedResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountSessionStart: Generate a session key (log in)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">(Optional) External URL of this server</param>
	public SessionKeyRegeneratedResponse AdminAccountSessionStart(string SelfAddress = null) {
		var resultTask = AdminAccountSessionStartAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountSessionStartAsUserAsync: Generate a session key for an end-user (log in as end-user)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="TargetUser">Target account username</param>
	public async Task<SessionKeyRegeneratedResponse> AdminAccountSessionStartAsUserAsync(string TargetUser) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/session-start-as-user", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<SessionKeyRegeneratedResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountSessionStartAsUser: Generate a session key for an end-user (log in as end-user)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="TargetUser">Target account username</param>
	public SessionKeyRegeneratedResponse AdminAccountSessionStartAsUser(string TargetUser) {
		var resultTask = AdminAccountSessionStartAsUserAsync(TargetUser);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountSessionUpgradeAsync: Upgrade a session key which is pending an MFA upgrade to a full session key
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SessionKey">The session key to upgrade</param>
	public async Task<CometAPIResponseMessage> AdminAccountSessionUpgradeAsync(string SessionKey) {
		var data = new Dictionary<string,string>();

		data["SessionKey"] = SessionKey;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/session-upgrade", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountSessionUpgrade: Upgrade a session key which is pending an MFA upgrade to a full session key
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SessionKey">The session key to upgrade</param>
	public CometAPIResponseMessage AdminAccountSessionUpgrade(string SessionKey) {
		var resultTask = AdminAccountSessionUpgradeAsync(SessionKey);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountSetPropertiesAsync: Update settings for your own admin account
	/// Updating your account password requires you to supply your current password.
	/// To set a new plaintext password, use a password format of 0 (PASSWORD_FORMAT_PLAINTEXT).
	/// This API does not currently allow you to modify your TOTP secret or IP whitelist.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Security">Updated account properties</param>
	public async Task<CometAPIResponseMessage> AdminAccountSetPropertiesAsync(AdminSecurityOptions Security) {
		var data = new Dictionary<string,string>();

		data["Security"] = JsonSerializer.Serialize(Security);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/set-properties", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountSetProperties: Update settings for your own admin account
	/// Updating your account password requires you to supply your current password.
	/// To set a new plaintext password, use a password format of 0 (PASSWORD_FORMAT_PLAINTEXT).
	/// This API does not currently allow you to modify your TOTP secret or IP whitelist.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Security">Updated account properties</param>
	public CometAPIResponseMessage AdminAccountSetProperties(AdminSecurityOptions Security) {
		var resultTask = AdminAccountSetPropertiesAsync(Security);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountU2fRequestRegistrationChallengeAsync: Register a new FIDO U2F token
	/// Browser support for U2F is ending in February 2022. WebAuthn is backwards
	/// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
	/// to allow their use with the WebAuthn endpoints.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">External URL of this server, used as U2F AppID and Facet</param>
	public async Task<U2FRegistrationChallengeResponse> AdminAccountU2fRequestRegistrationChallengeAsync(string SelfAddress) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/u2f/request-registration-challenge", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<U2FRegistrationChallengeResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountU2fRequestRegistrationChallenge: Register a new FIDO U2F token
	/// Browser support for U2F is ending in February 2022. WebAuthn is backwards
	/// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
	/// to allow their use with the WebAuthn endpoints.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">External URL of this server, used as U2F AppID and Facet</param>
	public U2FRegistrationChallengeResponse AdminAccountU2fRequestRegistrationChallenge(string SelfAddress) {
		var resultTask = AdminAccountU2fRequestRegistrationChallengeAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountU2fSubmitChallengeResponseAsync: Register a new FIDO U2F token
	/// Browser support for U2F is ending in February 2022. WebAuthn is backwards
	/// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
	/// to allow their use with the WebAuthn endpoints.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="U2FChallengeID">Associated value from AdminAccountU2fRequestRegistrationChallenge API</param>
	/// <param name="U2FClientData">U2F response data supplied by hardware token</param>
	/// <param name="U2FRegistrationData">U2F response data supplied by hardware token</param>
	/// <param name="U2FVersion">U2F response data supplied by hardware token</param>
	/// <param name="Description">(Optional) Description of the token</param>
	public async Task<CometAPIResponseMessage> AdminAccountU2fSubmitChallengeResponseAsync(string U2FChallengeID, string U2FClientData, string U2FRegistrationData, string U2FVersion, string Description = null) {
		var data = new Dictionary<string,string>();

		data["U2FChallengeID"] = U2FChallengeID;
		data["U2FClientData"] = U2FClientData;
		data["U2FRegistrationData"] = U2FRegistrationData;
		data["U2FVersion"] = U2FVersion;
		if (Description != null) {
			data["Description"] = Description;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/u2f/submit-challenge-response", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountU2fSubmitChallengeResponse: Register a new FIDO U2F token
	/// Browser support for U2F is ending in February 2022. WebAuthn is backwards
	/// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
	/// to allow their use with the WebAuthn endpoints.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="U2FChallengeID">Associated value from AdminAccountU2fRequestRegistrationChallenge API</param>
	/// <param name="U2FClientData">U2F response data supplied by hardware token</param>
	/// <param name="U2FRegistrationData">U2F response data supplied by hardware token</param>
	/// <param name="U2FVersion">U2F response data supplied by hardware token</param>
	/// <param name="Description">(Optional) Description of the token</param>
	public CometAPIResponseMessage AdminAccountU2fSubmitChallengeResponse(string U2FChallengeID, string U2FClientData, string U2FRegistrationData, string U2FVersion, string Description = null) {
		var resultTask = AdminAccountU2fSubmitChallengeResponseAsync(U2FChallengeID, U2FClientData, U2FRegistrationData, U2FVersion, Description);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountValidateTotpAsync: Validate the TOTP code before turning 2fa(TOTP) on
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="TOTPCode">Six-digit code after scanning barcode image</param>
	public async Task<CometAPIResponseMessage> AdminAccountValidateTotpAsync(string TOTPCode) {
		var data = new Dictionary<string,string>();

		data["TOTPCode"] = TOTPCode;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/validate-totp", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountValidateTotp: Validate the TOTP code before turning 2fa(TOTP) on
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="TOTPCode">Six-digit code after scanning barcode image</param>
	public CometAPIResponseMessage AdminAccountValidateTotp(string TOTPCode) {
		var resultTask = AdminAccountValidateTotpAsync(TOTPCode);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountWebauthnRequestRegistrationChallengeAsync: Register a new FIDO2 WebAuthn token
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">External URL of this server, used as WebAuthn ID</param>
	public async Task<WebAuthnRegistrationChallengeResponse> AdminAccountWebauthnRequestRegistrationChallengeAsync(string SelfAddress) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/webauthn/request-registration-challenge", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<WebAuthnRegistrationChallengeResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountWebauthnRequestRegistrationChallenge: Register a new FIDO2 WebAuthn token
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">External URL of this server, used as WebAuthn ID</param>
	public WebAuthnRegistrationChallengeResponse AdminAccountWebauthnRequestRegistrationChallenge(string SelfAddress) {
		var resultTask = AdminAccountWebauthnRequestRegistrationChallengeAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAccountWebauthnSubmitChallengeResponseAsync: Register a new FIDO2 WebAuthn token
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">External URL of this server, used as WebAuthn ID</param>
	/// <param name="ChallengeID">Associated value from AdminAccountWebAuthnRequestRegistrationChallenge API</param>
	/// <param name="Credential">JSON-encoded credential</param>
	public async Task<CometAPIResponseMessage> AdminAccountWebauthnSubmitChallengeResponseAsync(string SelfAddress, string ChallengeID, string Credential) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress;
		data["ChallengeID"] = ChallengeID;
		data["Credential"] = Credential;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/account/webauthn/submit-challenge-response", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAccountWebauthnSubmitChallengeResponse: Register a new FIDO2 WebAuthn token
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SelfAddress">External URL of this server, used as WebAuthn ID</param>
	/// <param name="ChallengeID">Associated value from AdminAccountWebAuthnRequestRegistrationChallenge API</param>
	/// <param name="Credential">JSON-encoded credential</param>
	public CometAPIResponseMessage AdminAccountWebauthnSubmitChallengeResponse(string SelfAddress, string ChallengeID, string Credential) {
		var resultTask = AdminAccountWebauthnSubmitChallengeResponseAsync(SelfAddress, ChallengeID, Credential);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAddUserAsync: Add a new user account
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">New account username</param>
	/// <param name="TargetPassword">New account password</param>
	/// <param name="StoreRecoveryCode">(Optional) If set to 1, store and keep a password recovery code for the generated
	/// user (>= 18.3.9)</param>
	/// <param name="RequirePasswordChange">(Optional) If set to 1, require to reset password at the first login for the
	/// generated user (>= 20.3.4)</param>
	/// <param name="TargetOrganization">(Optional) If present, create the user account on behalf of another organization.
	/// Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public async Task<CometAPIResponseMessage> AdminAddUserAsync(string TargetUser, string TargetPassword, Nullable<int> StoreRecoveryCode = null, Nullable<int> RequirePasswordChange = null, string TargetOrganization = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["TargetPassword"] = TargetPassword;
		if (StoreRecoveryCode != null) {
			data["StoreRecoveryCode"] = JsonSerializer.Serialize(StoreRecoveryCode);
		}
		if (RequirePasswordChange != null) {
			data["RequirePasswordChange"] = JsonSerializer.Serialize(RequirePasswordChange);
		}
		if (TargetOrganization != null) {
			data["TargetOrganization"] = TargetOrganization;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/add-user", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAddUser: Add a new user account
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">New account username</param>
	/// <param name="TargetPassword">New account password</param>
	/// <param name="StoreRecoveryCode">(Optional) If set to 1, store and keep a password recovery code for the generated
	/// user (>= 18.3.9)</param>
	/// <param name="RequirePasswordChange">(Optional) If set to 1, require to reset password at the first login for the
	/// generated user (>= 20.3.4)</param>
	/// <param name="TargetOrganization">(Optional) If present, create the user account on behalf of another organization.
	/// Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public CometAPIResponseMessage AdminAddUser(string TargetUser, string TargetPassword, Nullable<int> StoreRecoveryCode = null, Nullable<int> RequirePasswordChange = null, string TargetOrganization = null) {
		var resultTask = AdminAddUserAsync(TargetUser, TargetPassword, StoreRecoveryCode, RequirePasswordChange, TargetOrganization);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAddUserFromProfileAsync: Add a new user account (with all information)
	/// This allows you to create a new account and set all its properties at once (e.g. during account replication).
	/// Developers creating a signup form may find it simpler to use the AdminAddUser and AdminGetUserProfile /
	/// AdminSetUserProfile APIs separately.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">New account username</param>
	/// <param name="ProfileData">New account profile</param>
	/// <param name="TargetOrganization">(Optional) If present, create the user account on behalf of another organization.
	/// Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public async Task<CometAPIResponseMessage> AdminAddUserFromProfileAsync(string TargetUser, UserProfileConfig ProfileData, string TargetOrganization = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["ProfileData"] = JsonSerializer.Serialize(ProfileData);
		if (TargetOrganization != null) {
			data["TargetOrganization"] = TargetOrganization;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/add-user-from-profile", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAddUserFromProfile: Add a new user account (with all information)
	/// This allows you to create a new account and set all its properties at once (e.g. during account replication).
	/// Developers creating a signup form may find it simpler to use the AdminAddUser and AdminGetUserProfile /
	/// AdminSetUserProfile APIs separately.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">New account username</param>
	/// <param name="ProfileData">New account profile</param>
	/// <param name="TargetOrganization">(Optional) If present, create the user account on behalf of another organization.
	/// Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public CometAPIResponseMessage AdminAddUserFromProfile(string TargetUser, UserProfileConfig ProfileData, string TargetOrganization = null) {
		var resultTask = AdminAddUserFromProfileAsync(TargetUser, ProfileData, TargetOrganization);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAdminUserDeleteAsync: Delete an administrator
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="TargetUser">the username of the admin to be deleted</param>
	public async Task<CometAPIResponseMessage> AdminAdminUserDeleteAsync(string TargetUser) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/admin-user/delete", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAdminUserDelete: Delete an administrator
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="TargetUser">the username of the admin to be deleted</param>
	public CometAPIResponseMessage AdminAdminUserDelete(string TargetUser) {
		var resultTask = AdminAdminUserDeleteAsync(TargetUser);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAdminUserListAsync: List administrators
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<AllowedAdminUser[]> AdminAdminUserListAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/admin-user/list", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<AllowedAdminUser[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAdminUserList: List administrators
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public AllowedAdminUser[] AdminAdminUserList() {
		var resultTask = AdminAdminUserListAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminAdminUserNewAsync: Add a new administrator
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="TargetUser">the username for this new admin</param>
	/// <param name="TargetPassword">the password for this new admin user</param>
	/// <param name="TargetOrgID">(Optional) provide the organization ID for this user, it will default to the org of the
	/// authenticating user otherwise</param>
	public async Task<CometAPIResponseMessage> AdminAdminUserNewAsync(string TargetUser, string TargetPassword, string TargetOrgID = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["TargetPassword"] = TargetPassword;
		if (TargetOrgID != null) {
			data["TargetOrgID"] = TargetOrgID;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/admin-user/new", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminAdminUserNew: Add a new administrator
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="TargetUser">the username for this new admin</param>
	/// <param name="TargetPassword">the password for this new admin user</param>
	/// <param name="TargetOrgID">(Optional) provide the organization ID for this user, it will default to the org of the
	/// authenticating user otherwise</param>
	public CometAPIResponseMessage AdminAdminUserNew(string TargetUser, string TargetPassword, string TargetOrgID = null) {
		var resultTask = AdminAdminUserNewAsync(TargetUser, TargetPassword, TargetOrgID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingAvailablePlatformsAsync: List available software download platforms
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<Dictionary<long,AvailableDownload>> AdminBrandingAvailablePlatformsAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/available-platforms", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<long,AvailableDownload>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminBrandingAvailablePlatforms: List available software download platforms
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public Dictionary<long,AvailableDownload> AdminBrandingAvailablePlatforms() {
		var resultTask = AdminBrandingAvailablePlatformsAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientByPlatformAsync: Download software
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Platform">The selected download platform, from the AdminBrandingAvailablePlatforms API</param>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientByPlatformAsync(Nullable<int> Platform, string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["Platform"] = JsonSerializer.Serialize(Platform);
		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/by-platform", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientByPlatform: Download software
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Platform">The selected download platform, from the AdminBrandingAvailablePlatforms API</param>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientByPlatform(Nullable<int> Platform, string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientByPlatformAsync(Platform, SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientLinuxDebAsync: Download software (Linux Debian Package)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientLinuxDebAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/linux-deb", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientLinuxDeb: Download software (Linux Debian Package)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientLinuxDeb(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientLinuxDebAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientLinuxgenericAsync: Download software (Linux Server .run)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientLinuxgenericAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/linuxgeneric", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientLinuxgeneric: Download software (Linux Server .run)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientLinuxgeneric(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientLinuxgenericAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientMacosArm64Async: Download software (macOS arm64 pkg)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientMacosArm64Async(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/macos-arm64", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientMacosArm64: Download software (macOS arm64 pkg)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientMacosArm64(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientMacosArm64Async(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientMacosX8664Async: Download software (macOS x86_64 pkg)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientMacosX8664Async(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/macos-x86_64", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientMacosX8664: Download software (macOS x86_64 pkg)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientMacosX8664(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientMacosX8664Async(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientSpkDsm6Async: Download software (Synology SPK for DSM 6)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientSpkDsm6Async(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/spk-dsm6", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientSpkDsm6: Download software (Synology SPK for DSM 6)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientSpkDsm6(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientSpkDsm6Async(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientSpkDsm7Async: Download software (Synology SPK for DSM 7)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientSpkDsm7Async(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/spk-dsm7", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientSpkDsm7: Download software (Synology SPK for DSM 7)
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientSpkDsm7(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientSpkDsm7Async(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientTestAsync: Check if a software download is available
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Platform">The selected download platform, from the AdminBrandingAvailablePlatforms API</param>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<CometAPIResponseMessage> AdminBrandingGenerateClientTestAsync(Nullable<int> Platform, string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["Platform"] = JsonSerializer.Serialize(Platform);
		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/test", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientTest: Check if a software download is available
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Platform">The selected download platform, from the AdminBrandingAvailablePlatforms API</param>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public CometAPIResponseMessage AdminBrandingGenerateClientTest(Nullable<int> Platform, string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientTestAsync(Platform, SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsAnycpuExeAsync: Download software update (Windows AnyCPU exe)
	/// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if
	/// no custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientWindowsAnycpuExeAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/windows-anycpu-exe", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsAnycpuExe: Download software update (Windows AnyCPU exe)
	/// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if
	/// no custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientWindowsAnycpuExe(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientWindowsAnycpuExeAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsAnycpuZipAsync: Download software (Windows AnyCPU zip)
	/// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no
	/// custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientWindowsAnycpuZipAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/windows-anycpu-zip", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsAnycpuZip: Download software (Windows AnyCPU zip)
	/// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no
	/// custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientWindowsAnycpuZip(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientWindowsAnycpuZipAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8632ExeAsync: Download software update (Windows x86_32 exe)
	/// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if
	/// no custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientWindowsX8632ExeAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/windows-x86_32-exe", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8632Exe: Download software update (Windows x86_32 exe)
	/// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if
	/// no custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientWindowsX8632Exe(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientWindowsX8632ExeAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8632ZipAsync: Download software (Windows x86_32 zip)
	/// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no
	/// custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientWindowsX8632ZipAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/windows-x86_32-zip", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8632Zip: Download software (Windows x86_32 zip)
	/// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no
	/// custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientWindowsX8632Zip(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientWindowsX8632ZipAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8664ExeAsync: Download software update (Windows x86_64 exe)
	/// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if
	/// no custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientWindowsX8664ExeAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/windows-x86_64-exe", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8664Exe: Download software update (Windows x86_64 exe)
	/// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if
	/// no custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientWindowsX8664Exe(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientWindowsX8664ExeAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8664ZipAsync: Download software (Windows x86_64 zip)
	/// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no
	/// custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public async Task<byte[]> AdminBrandingGenerateClientWindowsX8664ZipAsync(string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/branding/generate-client/windows-x86_64-zip", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminBrandingGenerateClientWindowsX8664Zip: Download software (Windows x86_64 zip)
	/// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no
	/// custom codesigning certificate is present.
	/// 
	/// This API requires administrator authentication credentials, unless the server is configured to allow
	/// unauthenticated software downloads.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts</param>
	public byte[] AdminBrandingGenerateClientWindowsX8664Zip(string SelfAddress = null) {
		var resultTask = AdminBrandingGenerateClientWindowsX8664ZipAsync(SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminBulletinSubmitAsync: Send an email bulletin to all users
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Subject">Bulletin subject line</param>
	/// <param name="Content">Bulletin message content</param>
	public async Task<CometAPIResponseMessage> AdminBulletinSubmitAsync(string Subject, string Content) {
		var data = new Dictionary<string,string>();

		data["Subject"] = Subject;
		data["Content"] = Content;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/bulletin/submit", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminBulletinSubmit: Send an email bulletin to all users
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Subject">Bulletin subject line</param>
	/// <param name="Content">Bulletin message content</param>
	public CometAPIResponseMessage AdminBulletinSubmit(string Subject, string Content) {
		var resultTask = AdminBulletinSubmitAsync(Subject, Content);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminConstellationLastReportAsync: Get Constellation bucket usage report (cached)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public async Task<ConstellationCheckReport> AdminConstellationLastReportAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/constellation/last-report", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ConstellationCheckReport>(stream);
			}
		}
	}

	/// <summary>
	/// AdminConstellationLastReport: Get Constellation bucket usage report (cached)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public ConstellationCheckReport AdminConstellationLastReport() {
		var resultTask = AdminConstellationLastReportAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminConstellationNewReportAsync: Get Constellation bucket usage report (regenerate)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public async Task<ConstellationCheckReport> AdminConstellationNewReportAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/constellation/new-report", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ConstellationCheckReport>(stream);
			}
		}
	}

	/// <summary>
	/// AdminConstellationNewReport: Get Constellation bucket usage report (regenerate)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public ConstellationCheckReport AdminConstellationNewReport() {
		var resultTask = AdminConstellationNewReportAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminConstellationPruneNowAsync: Prune unused buckets
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public async Task<CometAPIResponseMessage> AdminConstellationPruneNowAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/constellation/prune-now", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminConstellationPruneNow: Prune unused buckets
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public CometAPIResponseMessage AdminConstellationPruneNow() {
		var resultTask = AdminConstellationPruneNowAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminConstellationStatusAsync: Get Constellation status
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public async Task<ConstellationStatusAPIResponse> AdminConstellationStatusAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/constellation/status", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ConstellationStatusAPIResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminConstellationStatus: Get Constellation status
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public ConstellationStatusAPIResponse AdminConstellationStatus() {
		var resultTask = AdminConstellationStatusAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminConvertStorageRoleAsync: Convert IAM Storage Role vault to its underlying S3 type
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="TargetUser">The user to receive the new Storage Vault</param>
	/// <param name="DestinationId">The id of the old storage role destination to convert</param>
	public async Task<RequestStorageVaultResponseMessage> AdminConvertStorageRoleAsync(string TargetUser, string DestinationId) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["DestinationId"] = DestinationId;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/convert-storage-role", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RequestStorageVaultResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminConvertStorageRole: Convert IAM Storage Role vault to its underlying S3 type
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="TargetUser">The user to receive the new Storage Vault</param>
	/// <param name="DestinationId">The id of the old storage role destination to convert</param>
	public RequestStorageVaultResponseMessage AdminConvertStorageRole(string TargetUser, string DestinationId) {
		var resultTask = AdminConvertStorageRoleAsync(TargetUser, DestinationId);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminCountJobsForCustomSearchAsync: Count jobs (for custom search)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Query">(No description available)</param>
	public async Task<CountJobsResponse> AdminCountJobsForCustomSearchAsync(SearchClause Query) {
		var data = new Dictionary<string,string>();

		data["Query"] = JsonSerializer.Serialize(Query);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/count-jobs-for-custom-search", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CountJobsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminCountJobsForCustomSearch: Count jobs (for custom search)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Query">(No description available)</param>
	public CountJobsResponse AdminCountJobsForCustomSearch(SearchClause Query) {
		var resultTask = AdminCountJobsForCustomSearchAsync(Query);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminCreateInstallTokenAsync: Create token for silent installation
	/// Currently only supported for Windows & macOS only
	/// Provide the installation token to silently install the client on windows `install.exe /TOKEN=<installtoken>`
	/// Provide the installation token to silently install the client on Mac OS `sudo launchctl setenv BACKUP_APP_TOKEN
	/// "installtoken" && sudo /usr/sbin/installer -allowUntrusted -pkg "Comet Backup.pkg" -target /`
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="TargetPassword">Selected account password</param>
	/// <param name="Server">(Optional) External URL of the authentication server that is different from the current
	/// server</param>
	public async Task<InstallTokenResponse> AdminCreateInstallTokenAsync(string TargetUser, string TargetPassword, string Server = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["TargetPassword"] = TargetPassword;
		if (Server != null) {
			data["Server"] = Server;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/create-install-token", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<InstallTokenResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminCreateInstallToken: Create token for silent installation
	/// Currently only supported for Windows & macOS only
	/// Provide the installation token to silently install the client on windows `install.exe /TOKEN=<installtoken>`
	/// Provide the installation token to silently install the client on Mac OS `sudo launchctl setenv BACKUP_APP_TOKEN
	/// "installtoken" && sudo /usr/sbin/installer -allowUntrusted -pkg "Comet Backup.pkg" -target /`
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="TargetPassword">Selected account password</param>
	/// <param name="Server">(Optional) External URL of the authentication server that is different from the current
	/// server</param>
	public InstallTokenResponse AdminCreateInstallToken(string TargetUser, string TargetPassword, string Server = null) {
		var resultTask = AdminCreateInstallTokenAsync(TargetUser, TargetPassword, Server);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDeleteUserAsync: Delete user account
	/// This does not remove any storage buckets. Unused storage buckets will be cleaned up by the Constellation Role.
	/// Any stored data can not be decrypted without the user profile. Misuse can cause data loss!
	/// This also allows to uninstall software from active devices under the user account
	/// This also removes all job history for the user account.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="UninstallConfig">(Optional) Uninstall software configuration (>= 20.3.5)</param>
	public async Task<CometAPIResponseMessage> AdminDeleteUserAsync(string TargetUser, UninstallConfig UninstallConfig = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		if (UninstallConfig != null) {
			data["UninstallConfig"] = JsonSerializer.Serialize(UninstallConfig);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/delete-user", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDeleteUser: Delete user account
	/// This does not remove any storage buckets. Unused storage buckets will be cleaned up by the Constellation Role.
	/// Any stored data can not be decrypted without the user profile. Misuse can cause data loss!
	/// This also allows to uninstall software from active devices under the user account
	/// This also removes all job history for the user account.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="UninstallConfig">(Optional) Uninstall software configuration (>= 20.3.5)</param>
	public CometAPIResponseMessage AdminDeleteUser(string TargetUser, UninstallConfig UninstallConfig = null) {
		var resultTask = AdminDeleteUserAsync(TargetUser, UninstallConfig);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDisableUserTotpAsync: Disable user account 2FA(TOTP) authentication
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public async Task<CometAPIResponseMessage> AdminDisableUserTotpAsync(string TargetUser) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/disable-user-totp", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDisableUserTotp: Disable user account 2FA(TOTP) authentication
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public CometAPIResponseMessage AdminDisableUserTotp(string TargetUser) {
		var resultTask = AdminDisableUserTotpAsync(TargetUser);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherApplyRetentionRulesAsync: Instruct a live connected device to apply retention rules now
	/// This command is understood by Comet Backup 17.6.9 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherApplyRetentionRulesAsync(string TargetID, string Destination) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/apply-retention-rules", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherApplyRetentionRules: Instruct a live connected device to apply retention rules now
	/// This command is understood by Comet Backup 17.6.9 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public CometAPIResponseMessage AdminDispatcherApplyRetentionRules(string TargetID, string Destination) {
		var resultTask = AdminDispatcherApplyRetentionRulesAsync(TargetID, Destination);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherDeepverifyStorageVaultAsync: Instruct a live connected device to deeply verify Storage Vault content
	/// This command is understood by Comet Backup 18.8.2 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherDeepverifyStorageVaultAsync(string TargetID, string Destination) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/deepverify-storage-vault", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherDeepverifyStorageVault: Instruct a live connected device to deeply verify Storage Vault content
	/// This command is understood by Comet Backup 18.8.2 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public CometAPIResponseMessage AdminDispatcherDeepverifyStorageVault(string TargetID, string Destination) {
		var resultTask = AdminDispatcherDeepverifyStorageVaultAsync(TargetID, Destination);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherDeleteSnapshotAsync: Instruct a live connected device to delete a stored snapshot
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotID">The backup job snapshot ID to delete</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherDeleteSnapshotAsync(string TargetID, string DestinationID, string SnapshotID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["DestinationID"] = DestinationID;
		data["SnapshotID"] = SnapshotID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/delete-snapshot", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherDeleteSnapshot: Instruct a live connected device to delete a stored snapshot
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotID">The backup job snapshot ID to delete</param>
	public CometAPIResponseMessage AdminDispatcherDeleteSnapshot(string TargetID, string DestinationID, string SnapshotID) {
		var resultTask = AdminDispatcherDeleteSnapshotAsync(TargetID, DestinationID, SnapshotID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherDeleteSnapshotsAsync: Instruct a live connected device to delete multiple stored snapshots
	/// The target device must be running Comet 20.9.10 or later.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">The backup job snapshot IDs to delete</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherDeleteSnapshotsAsync(string TargetID, string DestinationID, string[] SnapshotIDs) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["DestinationID"] = DestinationID;
		data["SnapshotIDs"] = JsonSerializer.Serialize(SnapshotIDs);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/delete-snapshots", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherDeleteSnapshots: Instruct a live connected device to delete multiple stored snapshots
	/// The target device must be running Comet 20.9.10 or later.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">The backup job snapshot IDs to delete</param>
	public CometAPIResponseMessage AdminDispatcherDeleteSnapshots(string TargetID, string DestinationID, string[] SnapshotIDs) {
		var resultTask = AdminDispatcherDeleteSnapshotsAsync(TargetID, DestinationID, SnapshotIDs);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherDropConnectionAsync: Disconnect a live connected device
	/// The device will almost certainly attempt to reconnect.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherDropConnectionAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/drop-connection", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherDropConnection: Disconnect a live connected device
	/// The device will almost certainly attempt to reconnect.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public CometAPIResponseMessage AdminDispatcherDropConnection(string TargetID) {
		var resultTask = AdminDispatcherDropConnectionAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherEmailPreviewAsync: Request HTML content of an email
	/// The remote device must have given consent for an MSP to browse their mail
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Snapshot">where the email belongs to</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Path">of the email to view</param>
	public async Task<EmailReportGeneratedPreview> AdminDispatcherEmailPreviewAsync(string TargetID, string Snapshot, string Destination, string Path) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Snapshot"] = Snapshot;
		data["Destination"] = Destination;
		data["Path"] = Path;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/email-preview", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<EmailReportGeneratedPreview>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherEmailPreview: Request HTML content of an email
	/// The remote device must have given consent for an MSP to browse their mail
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Snapshot">where the email belongs to</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Path">of the email to view</param>
	public EmailReportGeneratedPreview AdminDispatcherEmailPreview(string TargetID, string Snapshot, string Destination, string Path) {
		var resultTask = AdminDispatcherEmailPreviewAsync(TargetID, Snapshot, Destination, Path);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherGetDefaultLoginUrlAsync: Get the default login URL for a tenant
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="OrganizationID">Target organization</param>
	public async Task<OrganizationLoginURLResponse> AdminDispatcherGetDefaultLoginUrlAsync(string OrganizationID) {
		var data = new Dictionary<string,string>();

		data["OrganizationID"] = OrganizationID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/get-default-login-url", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<OrganizationLoginURLResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherGetDefaultLoginUrl: Get the default login URL for a tenant
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="OrganizationID">Target organization</param>
	public OrganizationLoginURLResponse AdminDispatcherGetDefaultLoginUrl(string OrganizationID) {
		var resultTask = AdminDispatcherGetDefaultLoginUrlAsync(OrganizationID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherImportApplyAsync: Instruct a live connected device to import settings from an installed product
	/// This command is understood by Comet Backup 17.12.0 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="ImportSourceID">The selected import source, as found by the AdminDispatcherRequestImportSources
	/// API</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherImportApplyAsync(string TargetID, string ImportSourceID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["ImportSourceID"] = ImportSourceID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/import-apply", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherImportApply: Instruct a live connected device to import settings from an installed product
	/// This command is understood by Comet Backup 17.12.0 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="ImportSourceID">The selected import source, as found by the AdminDispatcherRequestImportSources
	/// API</param>
	public CometAPIResponseMessage AdminDispatcherImportApply(string TargetID, string ImportSourceID) {
		var resultTask = AdminDispatcherImportApplyAsync(TargetID, ImportSourceID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherKillProcessAsync: Instruct a live connected device to disconnect
	/// The device will terminate its live-connection process and will not reconnect.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherKillProcessAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/kill-process", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherKillProcess: Instruct a live connected device to disconnect
	/// The device will terminate its live-connection process and will not reconnect.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public CometAPIResponseMessage AdminDispatcherKillProcess(string TargetID) {
		var resultTask = AdminDispatcherKillProcessAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherListActiveAsync: List live connected devices
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="UserNameFilter">(Optional) User name filter string</param>
	public async Task<Dictionary<string,LiveUserConnection>> AdminDispatcherListActiveAsync(string UserNameFilter = null) {
		var data = new Dictionary<string,string>();

		if (UserNameFilter != null) {
			data["UserNameFilter"] = UserNameFilter;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/list-active", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,LiveUserConnection>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherListActive: List live connected devices
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="UserNameFilter">(Optional) User name filter string</param>
	public Dictionary<string,LiveUserConnection> AdminDispatcherListActive(string UserNameFilter = null) {
		var resultTask = AdminDispatcherListActiveAsync(UserNameFilter);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherOffice365ListVirtualAccountsAsync: Request a list of Office365 Resources (groups, sites, teams
	/// groups and users)
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public async Task<BrowseOffice365ListVirtualAccountsResponse> AdminDispatcherOffice365ListVirtualAccountsAsync(string TargetID, Office365Credential Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/office365-list-virtual-accounts", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseOffice365ListVirtualAccountsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherOffice365ListVirtualAccounts: Request a list of Office365 Resources (groups, sites, teams groups and
	/// users)
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public BrowseOffice365ListVirtualAccountsResponse AdminDispatcherOffice365ListVirtualAccounts(string TargetID, Office365Credential Credentials) {
		var resultTask = AdminDispatcherOffice365ListVirtualAccountsAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherPingDestinationAsync: Test the connection to the storage bucket
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="ExtraData">The destination location settings</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherPingDestinationAsync(string TargetID, DestinationLocation ExtraData) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["ExtraData"] = JsonSerializer.Serialize(ExtraData);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/ping-destination", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherPingDestination: Test the connection to the storage bucket
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="ExtraData">The destination location settings</param>
	public CometAPIResponseMessage AdminDispatcherPingDestination(string TargetID, DestinationLocation ExtraData) {
		var resultTask = AdminDispatcherPingDestinationAsync(TargetID, ExtraData);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRefetchProfileAsync: Instruct a live connected device to refresh their profile
	/// This command is understood by Comet Backup 17.12.0 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherRefetchProfileAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/refetch-profile", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRefetchProfile: Instruct a live connected device to refresh their profile
	/// This command is understood by Comet Backup 17.12.0 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public CometAPIResponseMessage AdminDispatcherRefetchProfile(string TargetID) {
		var resultTask = AdminDispatcherRefetchProfileAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRegisterOfficeApplicationBeginAsync: Begin the process of registering a new Azure AD application
	/// that can access Office 365 for backup
	/// After calling this API, you should supply the login details to the end-user, and then begin polling the
	/// AdminDispatcherRegisterOfficeApplicationCheck with the supplied "Continuation" parameter to check on the
	/// registration process.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="EmailAddress">The email address of the Azure AD administrator</param>
	public async Task<RegisterOfficeApplicationBeginResponse> AdminDispatcherRegisterOfficeApplicationBeginAsync(string TargetID, string EmailAddress) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["EmailAddress"] = EmailAddress;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/register-office-application/begin", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RegisterOfficeApplicationBeginResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRegisterOfficeApplicationBegin: Begin the process of registering a new Azure AD application that can
	/// access Office 365 for backup
	/// After calling this API, you should supply the login details to the end-user, and then begin polling the
	/// AdminDispatcherRegisterOfficeApplicationCheck with the supplied "Continuation" parameter to check on the
	/// registration process.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="EmailAddress">The email address of the Azure AD administrator</param>
	public RegisterOfficeApplicationBeginResponse AdminDispatcherRegisterOfficeApplicationBegin(string TargetID, string EmailAddress) {
		var resultTask = AdminDispatcherRegisterOfficeApplicationBeginAsync(TargetID, EmailAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRegisterOfficeApplicationCheckAsync: Check the process of registering a new Azure AD application
	/// that can access Office 365 for backup
	/// You should begin the process by calling AdminDispatcherRegisterOfficeApplicationBegin and asking the end-user to
	/// complete the Azure authentication steps.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Continuation">The ID returned from the AdminDispatcherRegisterOfficeApplicationBegin endpoint</param>
	public async Task<RegisterOfficeApplicationCheckResponse> AdminDispatcherRegisterOfficeApplicationCheckAsync(string TargetID, string Continuation) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Continuation"] = Continuation;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/register-office-application/check", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RegisterOfficeApplicationCheckResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRegisterOfficeApplicationCheck: Check the process of registering a new Azure AD application that can
	/// access Office 365 for backup
	/// You should begin the process by calling AdminDispatcherRegisterOfficeApplicationBegin and asking the end-user to
	/// complete the Azure authentication steps.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Continuation">The ID returned from the AdminDispatcherRegisterOfficeApplicationBegin endpoint</param>
	public RegisterOfficeApplicationCheckResponse AdminDispatcherRegisterOfficeApplicationCheck(string TargetID, string Continuation) {
		var resultTask = AdminDispatcherRegisterOfficeApplicationCheckAsync(TargetID, Continuation);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherReindexStorageVaultAsync: Instruct a live connected device to rebuild Storage Vault indexes now
	/// This command is understood by Comet Backup 18.6.9 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherReindexStorageVaultAsync(string TargetID, string Destination) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/reindex-storage-vault", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherReindexStorageVault: Instruct a live connected device to rebuild Storage Vault indexes now
	/// This command is understood by Comet Backup 18.6.9 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public CometAPIResponseMessage AdminDispatcherReindexStorageVault(string TargetID, string Destination) {
		var resultTask = AdminDispatcherReindexStorageVaultAsync(TargetID, Destination);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseDiskDrivesAsync: Request a list of physical disk drive information from a live
	/// connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseDiskDrivesResponse> AdminDispatcherRequestBrowseDiskDrivesAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-disk-drives", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseDiskDrivesResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseDiskDrives: Request a list of physical disk drive information from a live connected
	/// device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseDiskDrivesResponse AdminDispatcherRequestBrowseDiskDrives(string TargetID) {
		var resultTask = AdminDispatcherRequestBrowseDiskDrivesAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseExchangeEdbAsync: Request a list of Exchange EDB databases from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseEDBResponse> AdminDispatcherRequestBrowseExchangeEdbAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-exchange-edb", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseEDBResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseExchangeEdb: Request a list of Exchange EDB databases from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseEDBResponse AdminDispatcherRequestBrowseExchangeEdb(string TargetID) {
		var resultTask = AdminDispatcherRequestBrowseExchangeEdbAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseHypervAsync: Request a list of Hyper-V virtual machines from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseHVResponse> AdminDispatcherRequestBrowseHypervAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-hyperv", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseHVResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseHyperv: Request a list of Hyper-V virtual machines from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseHVResponse AdminDispatcherRequestBrowseHyperv(string TargetID) {
		var resultTask = AdminDispatcherRequestBrowseHypervAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseMongodbAsync: Request a list of tables in MongoDB database
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Mongo database authentication settings</param>
	public async Task<BrowseSQLServerResponse> AdminDispatcherRequestBrowseMongodbAsync(string TargetID, MongoDBConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-mongodb", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseSQLServerResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseMongodb: Request a list of tables in MongoDB database
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Mongo database authentication settings</param>
	public BrowseSQLServerResponse AdminDispatcherRequestBrowseMongodb(string TargetID, MongoDBConnection Credentials) {
		var resultTask = AdminDispatcherRequestBrowseMongodbAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseMssqlAsync: Request a list of tables in MSSQL database
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MSSQL database authentication settings</param>
	public async Task<BrowseSQLServerResponse> AdminDispatcherRequestBrowseMssqlAsync(string TargetID, MSSQLConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-mssql", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseSQLServerResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseMssql: Request a list of tables in MSSQL database
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MSSQL database authentication settings</param>
	public BrowseSQLServerResponse AdminDispatcherRequestBrowseMssql(string TargetID, MSSQLConnection Credentials) {
		var resultTask = AdminDispatcherRequestBrowseMssqlAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseMysqlAsync: Request a list of tables in MySQL database
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MySQL database authentication settings</param>
	public async Task<BrowseSQLServerResponse> AdminDispatcherRequestBrowseMysqlAsync(string TargetID, MySQLConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-mysql", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseSQLServerResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseMysql: Request a list of tables in MySQL database
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MySQL database authentication settings</param>
	public BrowseSQLServerResponse AdminDispatcherRequestBrowseMysql(string TargetID, MySQLConnection Credentials) {
		var resultTask = AdminDispatcherRequestBrowseMysqlAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseVmwareAsync: Request a list of VMware vSphere virtual machines
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The VMware vSphere connection settings</param>
	public async Task<BrowseVMwareResponse> AdminDispatcherRequestBrowseVmwareAsync(string TargetID, VMwareConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-vmware", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseVMwareResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseVmware: Request a list of VMware vSphere virtual machines
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The VMware vSphere connection settings</param>
	public BrowseVMwareResponse AdminDispatcherRequestBrowseVmware(string TargetID, VMwareConnection Credentials) {
		var resultTask = AdminDispatcherRequestBrowseVmwareAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseVssAawAsync: Request a list of installed VSS Writers (Application-Aware Writers) from a
	/// live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseVSSResponse> AdminDispatcherRequestBrowseVssAawAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-browse-vss-aaw", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseVSSResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestBrowseVssAaw: Request a list of installed VSS Writers (Application-Aware Writers) from a live
	/// connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseVSSResponse AdminDispatcherRequestBrowseVssAaw(string TargetID) {
		var resultTask = AdminDispatcherRequestBrowseVssAawAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestFilesystemObjectsAsync: Request a list of filesystem objects from a live connected device
	/// The device must have granted the administrator permission to view its filenames.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">(Optional) Browse objects inside this path. If empty or not present, returns the top-level
	/// device paths</param>
	public async Task<DispatcherStoredObjectsResponse> AdminDispatcherRequestFilesystemObjectsAsync(string TargetID, string Path = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		if (Path != null) {
			data["Path"] = Path;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-filesystem-objects", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherStoredObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestFilesystemObjects: Request a list of filesystem objects from a live connected device
	/// The device must have granted the administrator permission to view its filenames.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">(Optional) Browse objects inside this path. If empty or not present, returns the top-level
	/// device paths</param>
	public DispatcherStoredObjectsResponse AdminDispatcherRequestFilesystemObjects(string TargetID, string Path = null) {
		var resultTask = AdminDispatcherRequestFilesystemObjectsAsync(TargetID, Path);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestImportSourcesAsync: Request a list of import sources from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<DispatcherAdminSourcesResponse> AdminDispatcherRequestImportSourcesAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-import-sources", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherAdminSourcesResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestImportSources: Request a list of import sources from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public DispatcherAdminSourcesResponse AdminDispatcherRequestImportSources(string TargetID) {
		var resultTask = AdminDispatcherRequestImportSourcesAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestOffice365AccountsAsync: Request a list of Office365 mailbox accounts
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public async Task<BrowseOffice365ObjectsResponse> AdminDispatcherRequestOffice365AccountsAsync(string TargetID, Office365Credential Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-office365-accounts", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseOffice365ObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestOffice365Accounts: Request a list of Office365 mailbox accounts
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public BrowseOffice365ObjectsResponse AdminDispatcherRequestOffice365Accounts(string TargetID, Office365Credential Credentials) {
		var resultTask = AdminDispatcherRequestOffice365AccountsAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestOffice365SitesAsync: Request a list of Office365 sites
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public async Task<BrowseOffice365ObjectsResponse> AdminDispatcherRequestOffice365SitesAsync(string TargetID, Office365Credential Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-office365-sites", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseOffice365ObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestOffice365Sites: Request a list of Office365 sites
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public BrowseOffice365ObjectsResponse AdminDispatcherRequestOffice365Sites(string TargetID, Office365Credential Credentials) {
		var resultTask = AdminDispatcherRequestOffice365SitesAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestStoredObjectsAsync: Request a list of stored objects inside an existing backup job
	/// The remote device must have given consent for an MSP to browse their files.
	/// To service this request, the remote device must connect to the Storage Vault and load index data. There may be a
	/// small delay. If the remote device is running Comet 20.12.0 or later, the necessary index data is cached when this
	/// API is first called, for 15 minutes after the last repeated call. This can improve performance for interactively
	/// browsing an entire tree of stored objects.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The selected backup job snapshot</param>
	/// <param name="TreeID">(Optional) Browse objects inside subdirectory of backup snapshot. If it is for VMDK single
	/// file restore, it should be the disk image's subtree ID.</param>
	/// <param name="Options">(Optional) Request a list of stored objects in vmdk file</param>
	public async Task<DispatcherStoredObjectsResponse> AdminDispatcherRequestStoredObjectsAsync(string TargetID, string Destination, string SnapshotID, string TreeID = null, VMDKSnapshotViewOptions Options = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;
		data["SnapshotID"] = SnapshotID;
		if (TreeID != null) {
			data["TreeID"] = TreeID;
		}
		if (Options != null) {
			data["Options"] = JsonSerializer.Serialize(Options);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-stored-objects", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherStoredObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestStoredObjects: Request a list of stored objects inside an existing backup job
	/// The remote device must have given consent for an MSP to browse their files.
	/// To service this request, the remote device must connect to the Storage Vault and load index data. There may be a
	/// small delay. If the remote device is running Comet 20.12.0 or later, the necessary index data is cached when this
	/// API is first called, for 15 minutes after the last repeated call. This can improve performance for interactively
	/// browsing an entire tree of stored objects.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The selected backup job snapshot</param>
	/// <param name="TreeID">(Optional) Browse objects inside subdirectory of backup snapshot. If it is for VMDK single
	/// file restore, it should be the disk image's subtree ID.</param>
	/// <param name="Options">(Optional) Request a list of stored objects in vmdk file</param>
	public DispatcherStoredObjectsResponse AdminDispatcherRequestStoredObjects(string TargetID, string Destination, string SnapshotID, string TreeID = null, VMDKSnapshotViewOptions Options = null) {
		var resultTask = AdminDispatcherRequestStoredObjectsAsync(TargetID, Destination, SnapshotID, TreeID, Options);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestVaultSnapshotsAsync: Request a list of Storage Vault snapshots from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	public async Task<DispatcherVaultSnapshotsResponse> AdminDispatcherRequestVaultSnapshotsAsync(string TargetID, string Destination) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-vault-snapshots", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherVaultSnapshotsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestVaultSnapshots: Request a list of Storage Vault snapshots from a live connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	public DispatcherVaultSnapshotsResponse AdminDispatcherRequestVaultSnapshots(string TargetID, string Destination) {
		var resultTask = AdminDispatcherRequestVaultSnapshotsAsync(TargetID, Destination);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRequestWindiskSnapshotAsync: Request a Disk Image snapshot with the windiskbrowse-style from a live
	/// connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The Snapshot ID</param>
	public async Task<DispatcherWindiskSnapshotResponse> AdminDispatcherRequestWindiskSnapshotAsync(string TargetID, string Destination, string SnapshotID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;
		data["SnapshotID"] = SnapshotID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/request-windisk-snapshot", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherWindiskSnapshotResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRequestWindiskSnapshot: Request a Disk Image snapshot with the windiskbrowse-style from a live
	/// connected device
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The Snapshot ID</param>
	public DispatcherWindiskSnapshotResponse AdminDispatcherRequestWindiskSnapshot(string TargetID, string Destination, string SnapshotID) {
		var resultTask = AdminDispatcherRequestWindiskSnapshotAsync(TargetID, Destination, SnapshotID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRunBackupAsync: Instruct a live connected device to run a scheduled backup
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="BackupRule">The schedule GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherRunBackupAsync(string TargetID, string BackupRule) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["BackupRule"] = BackupRule;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/run-backup", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRunBackup: Instruct a live connected device to run a scheduled backup
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="BackupRule">The schedule GUID</param>
	public CometAPIResponseMessage AdminDispatcherRunBackup(string TargetID, string BackupRule) {
		var resultTask = AdminDispatcherRunBackupAsync(TargetID, BackupRule);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRunBackupCustomAsync: Instruct a live connected device to run a backup
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	/// <param name="Options">(Optional) Extra job parameters (>= 19.3.6)</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherRunBackupCustomAsync(string TargetID, string Source, string Destination, BackupJobAdvancedOptions Options = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Source"] = Source;
		data["Destination"] = Destination;
		if (Options != null) {
			data["Options"] = JsonSerializer.Serialize(Options);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/run-backup-custom", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRunBackupCustom: Instruct a live connected device to run a backup
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	/// <param name="Options">(Optional) Extra job parameters (>= 19.3.6)</param>
	public CometAPIResponseMessage AdminDispatcherRunBackupCustom(string TargetID, string Source, string Destination, BackupJobAdvancedOptions Options = null) {
		var resultTask = AdminDispatcherRunBackupCustomAsync(TargetID, Source, Destination, Options);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRunRestoreAsync: Instruct a live connected device to perform a local restore
	/// This command is understood by Comet Backup 17.9.3 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">The local path to restore to</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data (>=
	/// 19.3.0)</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherRunRestoreAsync(string TargetID, string Path, string Source, string Destination, string Snapshot = null, string[] Paths = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Path"] = Path;
		data["Source"] = Source;
		data["Destination"] = Destination;
		if (Snapshot != null) {
			data["Snapshot"] = Snapshot;
		}
		if (Paths != null) {
			data["Paths"] = JsonSerializer.Serialize(Paths);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/run-restore", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRunRestore: Instruct a live connected device to perform a local restore
	/// This command is understood by Comet Backup 17.9.3 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">The local path to restore to</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data (>=
	/// 19.3.0)</param>
	public CometAPIResponseMessage AdminDispatcherRunRestore(string TargetID, string Path, string Source, string Destination, string Snapshot = null, string[] Paths = null) {
		var resultTask = AdminDispatcherRunRestoreAsync(TargetID, Path, Source, Destination, Snapshot, Paths);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherRunRestoreCustomAsync: Instruct a live connected device to perform a local restore
	/// This command is understood by Comet Backup 18.6.0 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Options">Restore targets</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data</param>
	/// <param name="KnownFileCount">(Optional) The number of files to restore, if known. Supplying this means we don't
	/// need to walk the entire tree just to find the file count and will speed up the restoration process.</param>
	/// <param name="KnownByteCount">(Optional) The total size in bytes of files to restore, if known. Supplying this means
	/// we don't need to walk the entire tree just to find the total file size and will speed up the restoration
	/// process.</param>
	/// <param name="KnownDirCount">(Optional) The number of directories to restore, if known. Supplying this means we
	/// don't need to walk the entire tree just to find the number of directories and will speed up the restoration
	/// process.</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherRunRestoreCustomAsync(string TargetID, string Source, string Destination, RestoreJobAdvancedOptions Options, string Snapshot = null, string[] Paths = null, Nullable<int> KnownFileCount = null, Nullable<int> KnownByteCount = null, Nullable<int> KnownDirCount = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Source"] = Source;
		data["Destination"] = Destination;
		data["Options"] = JsonSerializer.Serialize(Options);
		if (Snapshot != null) {
			data["Snapshot"] = Snapshot;
		}
		if (Paths != null) {
			data["Paths"] = JsonSerializer.Serialize(Paths);
		}
		if (KnownFileCount != null) {
			data["KnownFileCount"] = JsonSerializer.Serialize(KnownFileCount);
		}
		if (KnownByteCount != null) {
			data["KnownByteCount"] = JsonSerializer.Serialize(KnownByteCount);
		}
		if (KnownDirCount != null) {
			data["KnownDirCount"] = JsonSerializer.Serialize(KnownDirCount);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/run-restore-custom", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherRunRestoreCustom: Instruct a live connected device to perform a local restore
	/// This command is understood by Comet Backup 18.6.0 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Options">Restore targets</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data</param>
	/// <param name="KnownFileCount">(Optional) The number of files to restore, if known. Supplying this means we don't
	/// need to walk the entire tree just to find the file count and will speed up the restoration process.</param>
	/// <param name="KnownByteCount">(Optional) The total size in bytes of files to restore, if known. Supplying this means
	/// we don't need to walk the entire tree just to find the total file size and will speed up the restoration
	/// process.</param>
	/// <param name="KnownDirCount">(Optional) The number of directories to restore, if known. Supplying this means we
	/// don't need to walk the entire tree just to find the number of directories and will speed up the restoration
	/// process.</param>
	public CometAPIResponseMessage AdminDispatcherRunRestoreCustom(string TargetID, string Source, string Destination, RestoreJobAdvancedOptions Options, string Snapshot = null, string[] Paths = null, Nullable<int> KnownFileCount = null, Nullable<int> KnownByteCount = null, Nullable<int> KnownDirCount = null) {
		var resultTask = AdminDispatcherRunRestoreCustomAsync(TargetID, Source, Destination, Options, Snapshot, Paths, KnownFileCount, KnownByteCount, KnownDirCount);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherSearchSnapshotsAsync: Search storage vault snapshots
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">Snapshots to search</param>
	/// <param name="Filter">The search filter</param>
	public async Task<SearchSnapshotsResponse> AdminDispatcherSearchSnapshotsAsync(string TargetID, string DestinationID, string[] SnapshotIDs, SearchClause Filter) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["DestinationID"] = DestinationID;
		data["SnapshotIDs"] = JsonSerializer.Serialize(SnapshotIDs);
		data["Filter"] = JsonSerializer.Serialize(Filter);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/search-snapshots", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<SearchSnapshotsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherSearchSnapshots: Search storage vault snapshots
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">Snapshots to search</param>
	/// <param name="Filter">The search filter</param>
	public SearchSnapshotsResponse AdminDispatcherSearchSnapshots(string TargetID, string DestinationID, string[] SnapshotIDs, SearchClause Filter) {
		var resultTask = AdminDispatcherSearchSnapshotsAsync(TargetID, DestinationID, SnapshotIDs, Filter);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherUninstallSoftwareAsync: Instruct a live connected device to self-uninstall the software
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="RemoveConfigFile">Determine if the config.dat file will be deleted at the same time</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherUninstallSoftwareAsync(string TargetID, Nullable<bool> RemoveConfigFile) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["RemoveConfigFile"] = JsonSerializer.Serialize(RemoveConfigFile);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/uninstall-software", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherUninstallSoftware: Instruct a live connected device to self-uninstall the software
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="RemoveConfigFile">Determine if the config.dat file will be deleted at the same time</param>
	public CometAPIResponseMessage AdminDispatcherUninstallSoftware(string TargetID, Nullable<bool> RemoveConfigFile) {
		var resultTask = AdminDispatcherUninstallSoftwareAsync(TargetID, RemoveConfigFile);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherUnlockAsync: Instruct a live connected device to remove lock files from a Storage Vault
	/// Misuse can cause data loss!
	/// This command is understood by Comet Backup 17.9.4 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherUnlockAsync(string TargetID, string Destination) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/unlock", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherUnlock: Instruct a live connected device to remove lock files from a Storage Vault
	/// Misuse can cause data loss!
	/// This command is understood by Comet Backup 17.9.4 and newer.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	public CometAPIResponseMessage AdminDispatcherUnlock(string TargetID, string Destination) {
		var resultTask = AdminDispatcherUnlockAsync(TargetID, Destination);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherUpdateLoginUrlAsync: Instruct a live connected device to update its login server URL
	/// The device will attempt to connect to the new Auth Role Comet Server using its current username and password. If
	/// the test connection succeeds, the device migrates its saved connection settings and live connections to the new
	/// server. If the device is not registered on the new URL, or if the credentials are incorrect, the device remains on
	/// the current Auth Role server.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="NewURL">The new external URL of this server</param>
	/// <param name="Force">(Optional) No checks will be done using previous URL</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherUpdateLoginUrlAsync(string TargetID, string NewURL, Nullable<bool> Force = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["NewURL"] = NewURL;
		if (Force != null) {
			data["Force"] = JsonSerializer.Serialize(Force);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/update-login-url", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherUpdateLoginUrl: Instruct a live connected device to update its login server URL
	/// The device will attempt to connect to the new Auth Role Comet Server using its current username and password. If
	/// the test connection succeeds, the device migrates its saved connection settings and live connections to the new
	/// server. If the device is not registered on the new URL, or if the credentials are incorrect, the device remains on
	/// the current Auth Role server.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="NewURL">The new external URL of this server</param>
	/// <param name="Force">(Optional) No checks will be done using previous URL</param>
	public CometAPIResponseMessage AdminDispatcherUpdateLoginUrl(string TargetID, string NewURL, Nullable<bool> Force = null) {
		var resultTask = AdminDispatcherUpdateLoginUrlAsync(TargetID, NewURL, Force);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminDispatcherUpdateSoftwareAsync: Instruct a live connected device to download a software update
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// This API requires the Software Build Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts (>=
	/// 19.3.11)</param>
	public async Task<CometAPIResponseMessage> AdminDispatcherUpdateSoftwareAsync(string TargetID, string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/dispatcher/update-software", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminDispatcherUpdateSoftware: Instruct a live connected device to download a software update
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// This API requires the Software Build Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="SelfAddress">(Optional) The external URL of this server, used to resolve conflicts (>=
	/// 19.3.11)</param>
	public CometAPIResponseMessage AdminDispatcherUpdateSoftware(string TargetID, string SelfAddress = null) {
		var resultTask = AdminDispatcherUpdateSoftwareAsync(TargetID, SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminExternalAuthSourcesDeleteAsync: Delete an external admin authentication source
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SourceID">(No description available)</param>
	public async Task<CometAPIResponseMessage> AdminExternalAuthSourcesDeleteAsync(string SourceID) {
		var data = new Dictionary<string,string>();

		data["SourceID"] = SourceID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/external-auth-sources/delete", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminExternalAuthSourcesDelete: Delete an external admin authentication source
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="SourceID">(No description available)</param>
	public CometAPIResponseMessage AdminExternalAuthSourcesDelete(string SourceID) {
		var resultTask = AdminExternalAuthSourcesDeleteAsync(SourceID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminExternalAuthSourcesGetAsync: Get a map of all external admin authentication sources
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public async Task<Dictionary<string,ExternalAuthenticationSource>> AdminExternalAuthSourcesGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/external-auth-sources/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,ExternalAuthenticationSource>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminExternalAuthSourcesGet: Get a map of all external admin authentication sources
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public Dictionary<string,ExternalAuthenticationSource> AdminExternalAuthSourcesGet() {
		var resultTask = AdminExternalAuthSourcesGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminExternalAuthSourcesNewAsync: Create an external admin authentication source
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Source">(No description available)</param>
	/// <param name="SourceID">(Optional) (No description available)</param>
	public async Task<ExternalAuthenticationSourceResponse> AdminExternalAuthSourcesNewAsync(ExternalAuthenticationSource Source, string SourceID = null) {
		var data = new Dictionary<string,string>();

		data["Source"] = JsonSerializer.Serialize(Source);
		if (SourceID != null) {
			data["SourceID"] = SourceID;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/external-auth-sources/new", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ExternalAuthenticationSourceResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminExternalAuthSourcesNew: Create an external admin authentication source
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Source">(No description available)</param>
	/// <param name="SourceID">(Optional) (No description available)</param>
	public ExternalAuthenticationSourceResponse AdminExternalAuthSourcesNew(ExternalAuthenticationSource Source, string SourceID = null) {
		var resultTask = AdminExternalAuthSourcesNewAsync(Source, SourceID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminExternalAuthSourcesSetAsync: Updates the current tenant's external admin authentication sources. This will set
	/// all
	/// sources for the tenant; none will be preserved.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Sources">(No description available)</param>
	public async Task<CometAPIResponseMessage> AdminExternalAuthSourcesSetAsync(Dictionary<string,ExternalAuthenticationSource> Sources) {
		var data = new Dictionary<string,string>();

		data["Sources"] = JsonSerializer.Serialize(Sources);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/external-auth-sources/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminExternalAuthSourcesSet: Updates the current tenant's external admin authentication sources. This will set all
	/// sources for the tenant; none will be preserved.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Sources">(No description available)</param>
	public CometAPIResponseMessage AdminExternalAuthSourcesSet(Dictionary<string,ExternalAuthenticationSource> Sources) {
		var resultTask = AdminExternalAuthSourcesSetAsync(Sources);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobLogAsync: Get the report log entries for a single job, in plaintext format
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job ID</param>
	public async Task<byte[]> AdminGetJobLogAsync(string JobID) {
		var data = new Dictionary<string,string>();

		data["JobID"] = JobID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-job-log", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminGetJobLog: Get the report log entries for a single job, in plaintext format
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job ID</param>
	public byte[] AdminGetJobLog(string JobID) {
		var resultTask = AdminGetJobLogAsync(JobID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobLogEntriesAsync: Get the report log entries for a single job
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job ID</param>
	/// <param name="MinSeverity">(Optional) Return only job log entries with equal or higher severity</param>
	/// <param name="MessageContains">(Optional) Return only job log entries that contain exact string</param>
	public async Task<JobEntry[]> AdminGetJobLogEntriesAsync(string JobID, string MinSeverity = null, string MessageContains = null) {
		var data = new Dictionary<string,string>();

		data["JobID"] = JobID;
		if (MinSeverity != null) {
			data["MinSeverity"] = MinSeverity;
		}
		if (MessageContains != null) {
			data["MessageContains"] = MessageContains;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-job-log-entries", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<JobEntry[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetJobLogEntries: Get the report log entries for a single job
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job ID</param>
	/// <param name="MinSeverity">(Optional) Return only job log entries with equal or higher severity</param>
	/// <param name="MessageContains">(Optional) Return only job log entries that contain exact string</param>
	public JobEntry[] AdminGetJobLogEntries(string JobID, string MinSeverity = null, string MessageContains = null) {
		var resultTask = AdminGetJobLogEntriesAsync(JobID, MinSeverity, MessageContains);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobPropertiesAsync: Get properties of a single job
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job ID</param>
	public async Task<BackupJobDetail> AdminGetJobPropertiesAsync(string JobID) {
		var data = new Dictionary<string,string>();

		data["JobID"] = JobID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-job-properties", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetJobProperties: Get properties of a single job
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job ID</param>
	public BackupJobDetail AdminGetJobProperties(string JobID) {
		var resultTask = AdminGetJobPropertiesAsync(JobID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobsAllAsync: Get jobs (All)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<BackupJobDetail[]> AdminGetJobsAllAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-jobs-all", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetJobsAll: Get jobs (All)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public BackupJobDetail[] AdminGetJobsAll() {
		var resultTask = AdminGetJobsAllAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobsForCustomSearchAsync: Get jobs (for custom search)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Query">(No description available)</param>
	public async Task<BackupJobDetail[]> AdminGetJobsForCustomSearchAsync(SearchClause Query) {
		var data = new Dictionary<string,string>();

		data["Query"] = JsonSerializer.Serialize(Query);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-jobs-for-custom-search", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetJobsForCustomSearch: Get jobs (for custom search)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Query">(No description available)</param>
	public BackupJobDetail[] AdminGetJobsForCustomSearch(SearchClause Query) {
		var resultTask = AdminGetJobsForCustomSearchAsync(Query);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobsForDateRangeAsync: Get jobs (for date range)
	/// The jobs are returned in an unspecified order.
	/// 
	/// If the `Start` parameter is later than `End`, they will be swapped.
	/// 
	/// This API will return all jobs that either started or ended within the supplied range.
	/// 
	/// Incomplete jobs have an end time of `0`. You can use this API to find only incomplete jobs by setting both `Start`
	/// and `End` to `0`.
	/// 
	/// Prior to Comet Server 22.6.0, additional Incomplete jobs may have been returned if you specified non-zero arguments
	/// for both `Start` and `End`.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Start">Timestamp (Unix)</param>
	/// <param name="End">Timestamp (Unix)</param>
	public async Task<BackupJobDetail[]> AdminGetJobsForDateRangeAsync(Nullable<int> Start, Nullable<int> End) {
		var data = new Dictionary<string,string>();

		data["Start"] = JsonSerializer.Serialize(Start);
		data["End"] = JsonSerializer.Serialize(End);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-jobs-for-date-range", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetJobsForDateRange: Get jobs (for date range)
	/// The jobs are returned in an unspecified order.
	/// 
	/// If the `Start` parameter is later than `End`, they will be swapped.
	/// 
	/// This API will return all jobs that either started or ended within the supplied range.
	/// 
	/// Incomplete jobs have an end time of `0`. You can use this API to find only incomplete jobs by setting both `Start`
	/// and `End` to `0`.
	/// 
	/// Prior to Comet Server 22.6.0, additional Incomplete jobs may have been returned if you specified non-zero arguments
	/// for both `Start` and `End`.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Start">Timestamp (Unix)</param>
	/// <param name="End">Timestamp (Unix)</param>
	public BackupJobDetail[] AdminGetJobsForDateRange(Nullable<int> Start, Nullable<int> End) {
		var resultTask = AdminGetJobsForDateRangeAsync(Start, End);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobsForUserAsync: Get jobs (for user)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected username</param>
	public async Task<BackupJobDetail[]> AdminGetJobsForUserAsync(string TargetUser) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-jobs-for-user", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetJobsForUser: Get jobs (for user)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected username</param>
	public BackupJobDetail[] AdminGetJobsForUser(string TargetUser) {
		var resultTask = AdminGetJobsForUserAsync(TargetUser);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetJobsRecentAsync: Get jobs (Recent and incomplete)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<BackupJobDetail[]> AdminGetJobsRecentAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-jobs-recent", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetJobsRecent: Get jobs (Recent and incomplete)
	/// The jobs are returned in an unspecified order.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public BackupJobDetail[] AdminGetJobsRecent() {
		var resultTask = AdminGetJobsRecentAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetUserProfileAsync: Get user account profile
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public async Task<UserProfileConfig> AdminGetUserProfileAsync(string TargetUser) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-user-profile", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<UserProfileConfig>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetUserProfile: Get user account profile
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public UserProfileConfig AdminGetUserProfile(string TargetUser) {
		var resultTask = AdminGetUserProfileAsync(TargetUser);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetUserProfileAndHashAsync: Get user account profile (atomic)
	/// The resulting hash parameter can be passed to the corresponding update API, to atomically ensure that no changes
	/// occur between get/set operations.
	/// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve
	/// current hash values.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public async Task<GetProfileAndHashResponseMessage> AdminGetUserProfileAndHashAsync(string TargetUser) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-user-profile-and-hash", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<GetProfileAndHashResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetUserProfileAndHash: Get user account profile (atomic)
	/// The resulting hash parameter can be passed to the corresponding update API, to atomically ensure that no changes
	/// occur between get/set operations.
	/// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve
	/// current hash values.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public GetProfileAndHashResponseMessage AdminGetUserProfileAndHash(string TargetUser) {
		var resultTask = AdminGetUserProfileAndHashAsync(TargetUser);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminGetUserProfileHashAsync: Get user account profile (hash)
	/// The profile hash can be used to determine if a user account profile has changed.
	/// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve
	/// current hash values.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public async Task<GetProfileHashResponseMessage> AdminGetUserProfileHashAsync(string TargetUser) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/get-user-profile-hash", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<GetProfileHashResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminGetUserProfileHash: Get user account profile (hash)
	/// The profile hash can be used to determine if a user account profile has changed.
	/// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve
	/// current hash values.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	public GetProfileHashResponseMessage AdminGetUserProfileHash(string TargetUser) {
		var resultTask = AdminGetUserProfileHashAsync(TargetUser);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminInstallationDispatchDropConnectionAsync: Instruct a live connected device to disconnect
	/// The device will terminate its live-connection process and will not reconnect.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="DeviceID">The live connection Device GUID</param>
	public async Task<CometAPIResponseMessage> AdminInstallationDispatchDropConnectionAsync(string DeviceID) {
		var data = new Dictionary<string,string>();

		data["DeviceID"] = DeviceID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/installation/dispatch/drop-connection", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminInstallationDispatchDropConnection: Instruct a live connected device to disconnect
	/// The device will terminate its live-connection process and will not reconnect.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="DeviceID">The live connection Device GUID</param>
	public CometAPIResponseMessage AdminInstallationDispatchDropConnection(string DeviceID) {
		var resultTask = AdminInstallationDispatchDropConnectionAsync(DeviceID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminInstallationDispatchRegisterDeviceAsync: Instruct an unregistered device to authenticate with a given user
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="DeviceID">The live connection Device GUID</param>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="TargetPassword">Selected account password</param>
	/// <param name="TargetTOTPCode">(Optional) Selected account TOTP code</param>
	public async Task<string> AdminInstallationDispatchRegisterDeviceAsync(string DeviceID, string TargetUser, string TargetPassword, string TargetTOTPCode = null) {
		var data = new Dictionary<string,string>();

		data["DeviceID"] = DeviceID;
		data["TargetUser"] = TargetUser;
		data["TargetPassword"] = TargetPassword;
		if (TargetTOTPCode != null) {
			data["TargetTOTPCode"] = TargetTOTPCode;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/installation/dispatch/register-device", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<string>(stream);
			}
		}
	}

	/// <summary>
	/// AdminInstallationDispatchRegisterDevice: Instruct an unregistered device to authenticate with a given user
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="DeviceID">The live connection Device GUID</param>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="TargetPassword">Selected account password</param>
	/// <param name="TargetTOTPCode">(Optional) Selected account TOTP code</param>
	public string AdminInstallationDispatchRegisterDevice(string DeviceID, string TargetUser, string TargetPassword, string TargetTOTPCode = null) {
		var resultTask = AdminInstallationDispatchRegisterDeviceAsync(DeviceID, TargetUser, TargetPassword, TargetTOTPCode);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminInstallationListActiveAsync: List live connected devices in lobby mode
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<Dictionary<string,RegistrationLobbyConnection>> AdminInstallationListActiveAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/installation/list-active", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,RegistrationLobbyConnection>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminInstallationListActive: List live connected devices in lobby mode
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public Dictionary<string,RegistrationLobbyConnection> AdminInstallationListActive() {
		var resultTask = AdminInstallationListActiveAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminJobAbandonAsync: Mark a running job as abandoned
	/// This will change the status of a running job to abandoned.
	/// This is intended to be used on jobs which are definitely no longer running but are stuck in the running state; it
	/// will not attempt to cancel the job. If the job is detected to still be running after being marked as abandoned, it
	/// will be revived.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Username</param>
	/// <param name="JobID">Job ID</param>
	public async Task<CometAPIResponseMessage> AdminJobAbandonAsync(string TargetUser, string JobID) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["JobID"] = JobID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/job/abandon", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminJobAbandon: Mark a running job as abandoned
	/// This will change the status of a running job to abandoned.
	/// This is intended to be used on jobs which are definitely no longer running but are stuck in the running state; it
	/// will not attempt to cancel the job. If the job is detected to still be running after being marked as abandoned, it
	/// will be revived.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Username</param>
	/// <param name="JobID">Job ID</param>
	public CometAPIResponseMessage AdminJobAbandon(string TargetUser, string JobID) {
		var resultTask = AdminJobAbandonAsync(TargetUser, JobID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminJobCancelAsync: Cancel a running job
	/// A request is sent to the live-connected device, asking it to cancel the operation. This may fail if there is no
	/// live-connection.
	/// Only jobs from Comet 18.3.5 or newer can be cancelled. A job can only be cancelled if it has a non-empty
	/// CancellationID field in its properties.
	/// If the device is running Comet 21.9.5 or later, this API will wait up to ten seconds for a confirmation from the
	/// client.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Username</param>
	/// <param name="JobID">Job ID</param>
	public async Task<CometAPIResponseMessage> AdminJobCancelAsync(string TargetUser, string JobID) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["JobID"] = JobID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/job/cancel", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminJobCancel: Cancel a running job
	/// A request is sent to the live-connected device, asking it to cancel the operation. This may fail if there is no
	/// live-connection.
	/// Only jobs from Comet 18.3.5 or newer can be cancelled. A job can only be cancelled if it has a non-empty
	/// CancellationID field in its properties.
	/// If the device is running Comet 21.9.5 or later, this API will wait up to ten seconds for a confirmation from the
	/// client.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Username</param>
	/// <param name="JobID">Job ID</param>
	public CometAPIResponseMessage AdminJobCancel(string TargetUser, string JobID) {
		var resultTask = AdminJobCancelAsync(TargetUser, JobID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminListUsersAsync: List all user accounts
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<string[]> AdminListUsersAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/list-users", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<string[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminListUsers: List all user accounts
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public string[] AdminListUsers() {
		var resultTask = AdminListUsersAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminListUsersFullAsync: List all user account profiles
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<Dictionary<string,UserProfileConfig>> AdminListUsersFullAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/list-users-full", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,UserProfileConfig>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminListUsersFull: List all user account profiles
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public Dictionary<string,UserProfileConfig> AdminListUsersFull() {
		var resultTask = AdminListUsersFullAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaBrandingConfigGetAsync: Get Branding configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public async Task<ServerConfigOptionsBrandingFragment> AdminMetaBrandingConfigGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/branding-config/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ServerConfigOptionsBrandingFragment>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaBrandingConfigGet: Get Branding configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public ServerConfigOptionsBrandingFragment AdminMetaBrandingConfigGet() {
		var resultTask = AdminMetaBrandingConfigGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaBrandingConfigSetAsync: Set Branding configuration
	/// Note that file resources must be provided using a resource URI, i.e
	/// `"resource://05ba0b90ee66bda433169581188aba8d29faa938f9464cccd651a02fdf2e5b57"`. See AdminMetaResourceNew for the
	/// API documentation to create new file resources.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="BrandingConfig">Updated configuration content</param>
	public async Task<CometAPIResponseMessage> AdminMetaBrandingConfigSetAsync(BrandingOptions BrandingConfig) {
		var data = new Dictionary<string,string>();

		data["BrandingConfig"] = JsonSerializer.Serialize(BrandingConfig);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/branding-config/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaBrandingConfigSet: Set Branding configuration
	/// Note that file resources must be provided using a resource URI, i.e
	/// `"resource://05ba0b90ee66bda433169581188aba8d29faa938f9464cccd651a02fdf2e5b57"`. See AdminMetaResourceNew for the
	/// API documentation to create new file resources.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="BrandingConfig">Updated configuration content</param>
	public CometAPIResponseMessage AdminMetaBrandingConfigSet(BrandingOptions BrandingConfig) {
		var resultTask = AdminMetaBrandingConfigSetAsync(BrandingConfig);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaBuildConfigGetAsync: Get Software Build Role configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public async Task<ServerConfigOptionsSoftwareBuildRoleFragment> AdminMetaBuildConfigGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/build-config/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ServerConfigOptionsSoftwareBuildRoleFragment>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaBuildConfigGet: Get Software Build Role configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public ServerConfigOptionsSoftwareBuildRoleFragment AdminMetaBuildConfigGet() {
		var resultTask = AdminMetaBuildConfigGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaBuildConfigSetAsync: Set Build Role configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="SoftwareBuildRoleConfig">Updated configuration content</param>
	public async Task<CometAPIResponseMessage> AdminMetaBuildConfigSetAsync(SoftwareBuildRoleOptions SoftwareBuildRoleConfig) {
		var data = new Dictionary<string,string>();

		data["SoftwareBuildRoleConfig"] = JsonSerializer.Serialize(SoftwareBuildRoleConfig);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/build-config/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaBuildConfigSet: Set Build Role configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="SoftwareBuildRoleConfig">Updated configuration content</param>
	public CometAPIResponseMessage AdminMetaBuildConfigSet(SoftwareBuildRoleOptions SoftwareBuildRoleConfig) {
		var resultTask = AdminMetaBuildConfigSetAsync(SoftwareBuildRoleConfig);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaConstellationConfigGetAsync: Get Constellation configuration for the current organization
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public async Task<ConstellationRoleOptions> AdminMetaConstellationConfigGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/constellation/config/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ConstellationRoleOptions>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaConstellationConfigGet: Get Constellation configuration for the current organization
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	public ConstellationRoleOptions AdminMetaConstellationConfigGet() {
		var resultTask = AdminMetaConstellationConfigGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaConstellationConfigSetAsync: Set Constellation configuration for the current organization
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	/// <param name="ConstellationRoleOptions">Constellation role options to set</param>
	public async Task<CometAPIResponseMessage> AdminMetaConstellationConfigSetAsync(ConstellationRoleOptions ConstellationRoleOptions) {
		var data = new Dictionary<string,string>();

		data["ConstellationRoleOptions"] = JsonSerializer.Serialize(ConstellationRoleOptions);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/constellation/config/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaConstellationConfigSet: Set Constellation configuration for the current organization
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Constellation Role to be enabled.
	/// </summary>
	/// <param name="ConstellationRoleOptions">Constellation role options to set</param>
	public CometAPIResponseMessage AdminMetaConstellationConfigSet(ConstellationRoleOptions ConstellationRoleOptions) {
		var resultTask = AdminMetaConstellationConfigSetAsync(ConstellationRoleOptions);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaEmailOptionsGetAsync: Get the email options
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public async Task<EmailOptions> AdminMetaEmailOptionsGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/email-options/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<EmailOptions>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaEmailOptionsGet: Get the email options
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public EmailOptions AdminMetaEmailOptionsGet() {
		var resultTask = AdminMetaEmailOptionsGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaEmailOptionsSetAsync: Set the email options
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="EmailOptions">The replacement email reporting options.</param>
	public async Task<CometAPIResponseMessage> AdminMetaEmailOptionsSetAsync(EmailOptions EmailOptions) {
		var data = new Dictionary<string,string>();

		data["EmailOptions"] = JsonSerializer.Serialize(EmailOptions);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/email-options/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaEmailOptionsSet: Set the email options
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="EmailOptions">The replacement email reporting options.</param>
	public CometAPIResponseMessage AdminMetaEmailOptionsSet(EmailOptions EmailOptions) {
		var resultTask = AdminMetaEmailOptionsSetAsync(EmailOptions);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaListAvailableLogDaysAsync: Get log files
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<long[]> AdminMetaListAvailableLogDaysAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/list-available-log-days", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<long[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaListAvailableLogDays: Get log files
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public long[] AdminMetaListAvailableLogDays() {
		var resultTask = AdminMetaListAvailableLogDaysAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaPsaConfigListGetAsync: Get the server PSA configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public async Task<PSAConfig[]> AdminMetaPsaConfigListGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/psa-config-list/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<PSAConfig[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaPsaConfigListGet: Get the server PSA configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public PSAConfig[] AdminMetaPsaConfigListGet() {
		var resultTask = AdminMetaPsaConfigListGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaPsaConfigListSetAsync: Update the server PSA configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="PSAConfigList">The replacement PSA configuration list</param>
	public async Task<CometAPIResponseMessage> AdminMetaPsaConfigListSetAsync(PSAConfig[] PSAConfigList) {
		var data = new Dictionary<string,string>();

		data["PSAConfigList"] = JsonSerializer.Serialize(PSAConfigList);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/psa-config-list/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaPsaConfigListSet: Update the server PSA configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="PSAConfigList">The replacement PSA configuration list</param>
	public CometAPIResponseMessage AdminMetaPsaConfigListSet(PSAConfig[] PSAConfigList) {
		var resultTask = AdminMetaPsaConfigListSetAsync(PSAConfigList);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaPsaConfigListSyncNowAsync: Synchronize all PSA services now
	/// This API applies to the current Organization's PSAConfig's only.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<CometAPIResponseMessage> AdminMetaPsaConfigListSyncNowAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/psa-config-list/sync-now", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaPsaConfigListSyncNow: Synchronize all PSA services now
	/// This API applies to the current Organization's PSAConfig's only.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public CometAPIResponseMessage AdminMetaPsaConfigListSyncNow() {
		var resultTask = AdminMetaPsaConfigListSyncNowAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaReadAllLogsAsync: Get a ZIP file of all of the server's log files
	/// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings
	/// in 18.3.2.
	/// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain
	/// mixed line-endings.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<byte[]> AdminMetaReadAllLogsAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/read-all-logs", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminMetaReadAllLogs: Get a ZIP file of all of the server's log files
	/// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings
	/// in 18.3.2.
	/// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain
	/// mixed line-endings.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public byte[] AdminMetaReadAllLogs() {
		var resultTask = AdminMetaReadAllLogsAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaReadLogsAsync: Get log file content
	/// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings
	/// in 18.3.2.
	/// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain
	/// mixed line-endings.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Log">A log day, selected from the options returned by the Get Log Files API</param>
	public async Task<byte[]> AdminMetaReadLogsAsync(Nullable<int> Log) {
		var data = new Dictionary<string,string>();

		data["Log"] = JsonSerializer.Serialize(Log);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/read-logs", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminMetaReadLogs: Get log file content
	/// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings
	/// in 18.3.2.
	/// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain
	/// mixed line-endings.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Log">A log day, selected from the options returned by the Get Log Files API</param>
	public byte[] AdminMetaReadLogs(Nullable<int> Log) {
		var resultTask = AdminMetaReadLogsAsync(Log);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaReadSelectLogsAsync: Get logs file content
	/// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings
	/// in 18.3.2.
	/// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain
	/// mixed line-endings.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Logs">An array of log days, selected from the options returned by the Get Log Files API</param>
	public async Task<byte[]> AdminMetaReadSelectLogsAsync(long[] Logs) {
		var data = new Dictionary<string,string>();

		data["Logs"] = JsonSerializer.Serialize(Logs);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/read-select-logs", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminMetaReadSelectLogs: Get logs file content
	/// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings
	/// in 18.3.2.
	/// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain
	/// mixed line-endings.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Logs">An array of log days, selected from the options returned by the Get Log Files API</param>
	public byte[] AdminMetaReadSelectLogs(long[] Logs) {
		var resultTask = AdminMetaReadSelectLogsAsync(Logs);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaRemoteStorageVaultGetAsync: Get Requesting Remote Storage Vault Config
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public async Task<RemoteStorageOption[]> AdminMetaRemoteStorageVaultGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/remote-storage-vault/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RemoteStorageOption[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaRemoteStorageVaultGet: Get Requesting Remote Storage Vault Config
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public RemoteStorageOption[] AdminMetaRemoteStorageVaultGet() {
		var resultTask = AdminMetaRemoteStorageVaultGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaRemoteStorageVaultSetAsync: Set Storage template vault options
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="RemoteStorageOptions">Updated configuration content</param>
	public async Task<CometAPIResponseMessage> AdminMetaRemoteStorageVaultSetAsync(RemoteStorageOption[] RemoteStorageOptions) {
		var data = new Dictionary<string,string>();

		data["RemoteStorageOptions"] = JsonSerializer.Serialize(RemoteStorageOptions);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/remote-storage-vault/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaRemoteStorageVaultSet: Set Storage template vault options
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="RemoteStorageOptions">Updated configuration content</param>
	public CometAPIResponseMessage AdminMetaRemoteStorageVaultSet(RemoteStorageOption[] RemoteStorageOptions) {
		var resultTask = AdminMetaRemoteStorageVaultSetAsync(RemoteStorageOptions);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaRemoteStorageVaultTestAsync: Test the connection to the storage template
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="TemplateOptions">Storage Template Vault Options</param>
	public async Task<CometAPIResponseMessage> AdminMetaRemoteStorageVaultTestAsync(RemoteStorageOption TemplateOptions) {
		var data = new Dictionary<string,string>();

		data["TemplateOptions"] = JsonSerializer.Serialize(TemplateOptions);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/remote-storage-vault/test", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaRemoteStorageVaultTest: Test the connection to the storage template
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="TemplateOptions">Storage Template Vault Options</param>
	public CometAPIResponseMessage AdminMetaRemoteStorageVaultTest(RemoteStorageOption TemplateOptions) {
		var resultTask = AdminMetaRemoteStorageVaultTestAsync(TemplateOptions);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaResourceGetAsync: Get a resource file
	/// Resources are used to upload files within the server configuration.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Hash">The resource identifier</param>
	public async Task<byte[]> AdminMetaResourceGetAsync(string Hash) {
		var data = new Dictionary<string,string>();

		data["Hash"] = Hash;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/resource/get", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// AdminMetaResourceGet: Get a resource file
	/// Resources are used to upload files within the server configuration.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Hash">The resource identifier</param>
	public byte[] AdminMetaResourceGet(string Hash) {
		var resultTask = AdminMetaResourceGetAsync(Hash);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaResourceNewAsync: Upload a resource file
	/// Resources are used to upload files within the server configuration.
	/// The resulting resource ID is autogenerated.
	/// The lifespan of an uploaded resource is undefined. Resources may be deleted automatically, but it should remain
	/// available until the next call to AdminMetaServerConfigSet, and will remain available for as long as it is
	/// referenced by the server configuration.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="upload">The uploaded file contents, as a multipart/form-data part.</param>
	public async Task<AdminResourceResponse> AdminMetaResourceNewAsync(string upload) {
		throw new NotImplementedException("Multipart uploads are currently not supported in the C# SDK");
	}

	/// <summary>
	/// AdminMetaResourceNew: Upload a resource file
	/// Resources are used to upload files within the server configuration.
	/// The resulting resource ID is autogenerated.
	/// The lifespan of an uploaded resource is undefined. Resources may be deleted automatically, but it should remain
	/// available until the next call to AdminMetaServerConfigSet, and will remain available for as long as it is
	/// referenced by the server configuration.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="upload">The uploaded file contents, as a multipart/form-data part.</param>
	public AdminResourceResponse AdminMetaResourceNew(string upload) {
		var resultTask = AdminMetaResourceNewAsync(upload);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaRestartServiceAsync: Restart server
	/// The Comet Server process will exit. The service manager should restart the server automatically.
	/// 
	/// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it
	/// returns a successful response before shutting down.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public async Task<CometAPIResponseMessage> AdminMetaRestartServiceAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/restart-service", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaRestartService: Restart server
	/// The Comet Server process will exit. The service manager should restart the server automatically.
	/// 
	/// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it
	/// returns a successful response before shutting down.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public CometAPIResponseMessage AdminMetaRestartService() {
		var resultTask = AdminMetaRestartServiceAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaSendTestEmailAsync: Send a test email message
	/// This allows the Comet Server web interface to support testing different email credentials during setup.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="EmailOptions">Updated configuration content</param>
	/// <param name="Recipient">Target email address to send test email</param>
	public async Task<CometAPIResponseMessage> AdminMetaSendTestEmailAsync(EmailOptions EmailOptions, string Recipient) {
		var data = new Dictionary<string,string>();

		data["EmailOptions"] = JsonSerializer.Serialize(EmailOptions);
		data["Recipient"] = Recipient;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/send-test-email", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaSendTestEmail: Send a test email message
	/// This allows the Comet Server web interface to support testing different email credentials during setup.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="EmailOptions">Updated configuration content</param>
	/// <param name="Recipient">Target email address to send test email</param>
	public CometAPIResponseMessage AdminMetaSendTestEmail(EmailOptions EmailOptions, string Recipient) {
		var resultTask = AdminMetaSendTestEmailAsync(EmailOptions, Recipient);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaSendTestReportAsync: Send a test admin email report
	/// This allows a user to send a test email report
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="EmailReportingOption">Test email reporting option for sending</param>
	/// <param name="TargetOrganization">(Optional) If present, Testing email with a target organization. Only allowed for
	/// top-level admins. (>= 24.3.0)</param>
	public async Task<CometAPIResponseMessage> AdminMetaSendTestReportAsync(EmailReportingOption EmailReportingOption, string TargetOrganization = null) {
		var data = new Dictionary<string,string>();

		data["EmailReportingOption"] = JsonSerializer.Serialize(EmailReportingOption);
		if (TargetOrganization != null) {
			data["TargetOrganization"] = TargetOrganization;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/send-test-report", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaSendTestReport: Send a test admin email report
	/// This allows a user to send a test email report
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="EmailReportingOption">Test email reporting option for sending</param>
	/// <param name="TargetOrganization">(Optional) If present, Testing email with a target organization. Only allowed for
	/// top-level admins. (>= 24.3.0)</param>
	public CometAPIResponseMessage AdminMetaSendTestReport(EmailReportingOption EmailReportingOption, string TargetOrganization = null) {
		var resultTask = AdminMetaSendTestReportAsync(EmailReportingOption, TargetOrganization);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaServerConfigGetAsync: Get server configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<ServerConfigOptions> AdminMetaServerConfigGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/server-config/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ServerConfigOptions>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaServerConfigGet: Get server configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public ServerConfigOptions AdminMetaServerConfigGet() {
		var resultTask = AdminMetaServerConfigGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaServerConfigNetworkInterfacesAsync: List the available network interfaces on the PC running Comet Server
	/// Any IPv6 addresses are listed in compressed form without square-brackets.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<string[]> AdminMetaServerConfigNetworkInterfacesAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/server-config/network-interfaces", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<string[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaServerConfigNetworkInterfaces: List the available network interfaces on the PC running Comet Server
	/// Any IPv6 addresses are listed in compressed form without square-brackets.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public string[] AdminMetaServerConfigNetworkInterfaces() {
		var resultTask = AdminMetaServerConfigNetworkInterfacesAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaServerConfigSetAsync: Set server configuration
	/// The Comet Server process will exit. The service manager should restart the server automatically.
	/// 
	/// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it
	/// returns a successful response before shutting down.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Config">Updated configuration content</param>
	public async Task<CometAPIResponseMessage> AdminMetaServerConfigSetAsync(ServerConfigOptions Config) {
		var data = new Dictionary<string,string>();

		data["Config"] = JsonSerializer.Serialize(Config);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/server-config/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaServerConfigSet: Set server configuration
	/// The Comet Server process will exit. The service manager should restart the server automatically.
	/// 
	/// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it
	/// returns a successful response before shutting down.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Config">Updated configuration content</param>
	public CometAPIResponseMessage AdminMetaServerConfigSet(ServerConfigOptions Config) {
		var resultTask = AdminMetaServerConfigSetAsync(Config);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaShutdownServiceAsync: Shut down server
	/// The Comet Server process will exit.
	/// 
	/// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it
	/// returns a successful response before shutting down.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public async Task<CometAPIResponseMessage> AdminMetaShutdownServiceAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/shutdown-service", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaShutdownService: Shut down server
	/// The Comet Server process will exit.
	/// 
	/// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it
	/// returns a successful response before shutting down.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public CometAPIResponseMessage AdminMetaShutdownService() {
		var resultTask = AdminMetaShutdownServiceAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaSoftwareUpdateNewsAsync: Get software update news from the software provider
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public async Task<SoftwareUpdateNewsResponse> AdminMetaSoftwareUpdateNewsAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/software-update-news", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<SoftwareUpdateNewsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaSoftwareUpdateNews: Get software update news from the software provider
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public SoftwareUpdateNewsResponse AdminMetaSoftwareUpdateNews() {
		var resultTask = AdminMetaSoftwareUpdateNewsAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaStatsAsync: Get Comet Server historical statistics
	/// The returned key-value map is not necessarily ordered. Client-side code should sort the result before display.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Simple">Remove redundant statistics</param>
	public async Task<Dictionary<long,StatResult>> AdminMetaStatsAsync(Nullable<bool> Simple) {
		var data = new Dictionary<string,string>();

		data["Simple"] = JsonSerializer.Serialize(Simple);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/stats", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<long,StatResult>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaStats: Get Comet Server historical statistics
	/// The returned key-value map is not necessarily ordered. Client-side code should sort the result before display.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	/// <param name="Simple">Remove redundant statistics</param>
	public Dictionary<long,StatResult> AdminMetaStats(Nullable<bool> Simple) {
		var resultTask = AdminMetaStatsAsync(Simple);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaVersionAsync: Get server properties
	/// Retrieve the version number and basic properties about the server.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public async Task<ServerMetaVersionInfo> AdminMetaVersionAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/version", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ServerMetaVersionInfo>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaVersion: Get server properties
	/// Retrieve the version number and basic properties about the server.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// </summary>
	public ServerMetaVersionInfo AdminMetaVersion() {
		var resultTask = AdminMetaVersionAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaWebhookOptionsGetAsync: Get the server webhook configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public async Task<Dictionary<string,WebhookOption>> AdminMetaWebhookOptionsGetAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/webhook-options/get", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,WebhookOption>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaWebhookOptionsGet: Get the server webhook configuration
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	public Dictionary<string,WebhookOption> AdminMetaWebhookOptionsGet() {
		var resultTask = AdminMetaWebhookOptionsGetAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminMetaWebhookOptionsSetAsync: Update the server webhook configuration
	/// Calling this endpoint will interrupt any messages currently queued for existing webhook destinations.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="WebhookOptions">The replacement webhook target options.</param>
	public async Task<CometAPIResponseMessage> AdminMetaWebhookOptionsSetAsync(Dictionary<string,WebhookOption> WebhookOptions) {
		var data = new Dictionary<string,string>();

		data["WebhookOptions"] = JsonSerializer.Serialize(WebhookOptions);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/meta/webhook-options/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminMetaWebhookOptionsSet: Update the server webhook configuration
	/// Calling this endpoint will interrupt any messages currently queued for existing webhook destinations.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// </summary>
	/// <param name="WebhookOptions">The replacement webhook target options.</param>
	public CometAPIResponseMessage AdminMetaWebhookOptionsSet(Dictionary<string,WebhookOption> WebhookOptions) {
		var resultTask = AdminMetaWebhookOptionsSetAsync(WebhookOptions);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminNewsGetAllAsync: Get News entries (Admin)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<Dictionary<string,NewsEntry>> AdminNewsGetAllAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/news/get-all", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,NewsEntry>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminNewsGetAll: Get News entries (Admin)
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public Dictionary<string,NewsEntry> AdminNewsGetAll() {
		var resultTask = AdminNewsGetAllAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminNewsRemoveAsync: Remove news item
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="NewsItem">Selected news item GUID</param>
	public async Task<CometAPIResponseMessage> AdminNewsRemoveAsync(string NewsItem) {
		var data = new Dictionary<string,string>();

		data["NewsItem"] = NewsItem;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/news/remove", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminNewsRemove: Remove news item
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="NewsItem">Selected news item GUID</param>
	public CometAPIResponseMessage AdminNewsRemove(string NewsItem) {
		var resultTask = AdminNewsRemoveAsync(NewsItem);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminNewsSubmitAsync: Submit news item
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="NewsContent">Content of news item</param>
	public async Task<CometAPIResponseMessage> AdminNewsSubmitAsync(string NewsContent) {
		var data = new Dictionary<string,string>();

		data["NewsContent"] = NewsContent;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/news/submit", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminNewsSubmit: Submit news item
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="NewsContent">Content of news item</param>
	public CometAPIResponseMessage AdminNewsSubmit(string NewsContent) {
		var resultTask = AdminNewsSubmitAsync(NewsContent);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminOrganizationDeleteAsync: Delete an organization and all related users
	/// 
	/// Prior to Comet 22.6.0, this API was documented as returning the OrganizationResponse type. However, it always has
	/// returned only a CometAPIResponseMessage.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="OrganizationID">(Optional) (No description available)</param>
	/// <param name="UninstallConfig">(Optional) Uninstall software configuration</param>
	public async Task<CometAPIResponseMessage> AdminOrganizationDeleteAsync(string OrganizationID = null, UninstallConfig UninstallConfig = null) {
		var data = new Dictionary<string,string>();

		if (OrganizationID != null) {
			data["OrganizationID"] = OrganizationID;
		}
		if (UninstallConfig != null) {
			data["UninstallConfig"] = JsonSerializer.Serialize(UninstallConfig);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/organization/delete", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminOrganizationDelete: Delete an organization and all related users
	/// 
	/// Prior to Comet 22.6.0, this API was documented as returning the OrganizationResponse type. However, it always has
	/// returned only a CometAPIResponseMessage.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="OrganizationID">(Optional) (No description available)</param>
	/// <param name="UninstallConfig">(Optional) Uninstall software configuration</param>
	public CometAPIResponseMessage AdminOrganizationDelete(string OrganizationID = null, UninstallConfig UninstallConfig = null) {
		var resultTask = AdminOrganizationDeleteAsync(OrganizationID, UninstallConfig);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminOrganizationExportAsync: Run self-backup for a specific tenant
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Options">The export config options</param>
	public async Task<CometAPIResponseMessage> AdminOrganizationExportAsync(SelfBackupExportOptions Options) {
		var data = new Dictionary<string,string>();

		data["Options"] = JsonSerializer.Serialize(Options);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/organization/export", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminOrganizationExport: Run self-backup for a specific tenant
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="Options">The export config options</param>
	public CometAPIResponseMessage AdminOrganizationExport(SelfBackupExportOptions Options) {
		var resultTask = AdminOrganizationExportAsync(Options);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminOrganizationListAsync: List Organizations
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<Dictionary<string,Organization>> AdminOrganizationListAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/organization/list", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,Organization>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminOrganizationList: List Organizations
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public Dictionary<string,Organization> AdminOrganizationList() {
		var resultTask = AdminOrganizationListAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminOrganizationSetAsync: Create or Update an Organization
	/// 
	/// Prior to Comet 22.6.0, the 'ID' and 'Organization' fields were not present in the response.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="OrganizationID">(Optional) (No description available)</param>
	/// <param name="Organization">(Optional) (No description available)</param>
	public async Task<OrganizationResponse> AdminOrganizationSetAsync(string OrganizationID = null, Organization Organization = null) {
		var data = new Dictionary<string,string>();

		if (OrganizationID != null) {
			data["OrganizationID"] = OrganizationID;
		}
		if (Organization != null) {
			data["Organization"] = JsonSerializer.Serialize(Organization);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/organization/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<OrganizationResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminOrganizationSet: Create or Update an Organization
	/// 
	/// Prior to Comet 22.6.0, the 'ID' and 'Organization' fields were not present in the response.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="OrganizationID">(Optional) (No description available)</param>
	/// <param name="Organization">(Optional) (No description available)</param>
	public OrganizationResponse AdminOrganizationSet(string OrganizationID = null, Organization Organization = null) {
		var resultTask = AdminOrganizationSetAsync(OrganizationID, Organization);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminPoliciesDeleteAsync: Delete an existing policy object
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="PolicyID">The policy ID to update or create</param>
	public async Task<CometAPIResponseMessage> AdminPoliciesDeleteAsync(string PolicyID) {
		var data = new Dictionary<string,string>();

		data["PolicyID"] = PolicyID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/policies/delete", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminPoliciesDelete: Delete an existing policy object
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="PolicyID">The policy ID to update or create</param>
	public CometAPIResponseMessage AdminPoliciesDelete(string PolicyID) {
		var resultTask = AdminPoliciesDeleteAsync(PolicyID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminPoliciesGetAsync: Retrieve a single policy object
	/// A hash is also returned, to allow atomic modification operations.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="PolicyID">The policy ID to retrieve</param>
	public async Task<GetGroupPolicyResponse> AdminPoliciesGetAsync(string PolicyID) {
		var data = new Dictionary<string,string>();

		data["PolicyID"] = PolicyID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/policies/get", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<GetGroupPolicyResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminPoliciesGet: Retrieve a single policy object
	/// A hash is also returned, to allow atomic modification operations.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="PolicyID">The policy ID to retrieve</param>
	public GetGroupPolicyResponse AdminPoliciesGet(string PolicyID) {
		var resultTask = AdminPoliciesGetAsync(PolicyID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminPoliciesListAsync: List all policy object names
	/// For the top-level organization, the API result includes all policies for all organizations, unless the
	/// TargetOrganization parameter is present.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetOrganization">(Optional) If present, list the policies belonging to another organization. Only
	/// allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public async Task<Dictionary<string,string>> AdminPoliciesListAsync(string TargetOrganization = null) {
		var data = new Dictionary<string,string>();

		if (TargetOrganization != null) {
			data["TargetOrganization"] = TargetOrganization;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/policies/list", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,string>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminPoliciesList: List all policy object names
	/// For the top-level organization, the API result includes all policies for all organizations, unless the
	/// TargetOrganization parameter is present.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetOrganization">(Optional) If present, list the policies belonging to another organization. Only
	/// allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public Dictionary<string,string> AdminPoliciesList(string TargetOrganization = null) {
		var resultTask = AdminPoliciesListAsync(TargetOrganization);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminPoliciesListFullAsync: Get all policy objects
	/// For the top-level organization, the API result includes all policies for all organizations, unless the
	/// TargetOrganization parameter is present.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetOrganization">(Optional) If present, list the policies belonging to another organization. Only
	/// allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public async Task<Dictionary<string,GroupPolicy>> AdminPoliciesListFullAsync(string TargetOrganization = null) {
		var data = new Dictionary<string,string>();

		if (TargetOrganization != null) {
			data["TargetOrganization"] = TargetOrganization;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/policies/list-full", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,GroupPolicy>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminPoliciesListFull: Get all policy objects
	/// For the top-level organization, the API result includes all policies for all organizations, unless the
	/// TargetOrganization parameter is present.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetOrganization">(Optional) If present, list the policies belonging to another organization. Only
	/// allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public Dictionary<string,GroupPolicy> AdminPoliciesListFull(string TargetOrganization = null) {
		var resultTask = AdminPoliciesListFullAsync(TargetOrganization);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminPoliciesNewAsync: Create a new policy object
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Policy">The policy data</param>
	public async Task<CreateGroupPolicyResponse> AdminPoliciesNewAsync(GroupPolicy Policy) {
		var data = new Dictionary<string,string>();

		data["Policy"] = JsonSerializer.Serialize(Policy);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/policies/new", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CreateGroupPolicyResponse>(stream);
			}
		}
	}

	/// <summary>
	/// AdminPoliciesNew: Create a new policy object
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Policy">The policy data</param>
	public CreateGroupPolicyResponse AdminPoliciesNew(GroupPolicy Policy) {
		var resultTask = AdminPoliciesNewAsync(Policy);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminPoliciesSetAsync: Update an existing policy object
	/// An optional hash may be used, to ensure the modification was atomic.
	/// This API can also be used to create a new policy object with a specific hash.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="PolicyID">The policy ID to update or create</param>
	/// <param name="Policy">The policy data</param>
	/// <param name="CheckPolicyHash">(Optional) An atomic verification hash as supplied by the AdminPoliciesGet
	/// API</param>
	public async Task<CometAPIResponseMessage> AdminPoliciesSetAsync(string PolicyID, GroupPolicy Policy, string CheckPolicyHash = null) {
		var data = new Dictionary<string,string>();

		data["PolicyID"] = PolicyID;
		data["Policy"] = JsonSerializer.Serialize(Policy);
		if (CheckPolicyHash != null) {
			data["CheckPolicyHash"] = CheckPolicyHash;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/policies/set", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminPoliciesSet: Update an existing policy object
	/// An optional hash may be used, to ensure the modification was atomic.
	/// This API can also be used to create a new policy object with a specific hash.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="PolicyID">The policy ID to update or create</param>
	/// <param name="Policy">The policy data</param>
	/// <param name="CheckPolicyHash">(Optional) An atomic verification hash as supplied by the AdminPoliciesGet
	/// API</param>
	public CometAPIResponseMessage AdminPoliciesSet(string PolicyID, GroupPolicy Policy, string CheckPolicyHash = null) {
		var resultTask = AdminPoliciesSetAsync(PolicyID, Policy, CheckPolicyHash);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminPreviewUserEmailReportAsync: Preview an email report for a customer
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="EmailReportConfig">Email report configuration to preview</param>
	/// <param name="EmailAddress">(Optional) Email address that may be included in the report body (>= 20.3.3)</param>
	public async Task<EmailReportGeneratedPreview> AdminPreviewUserEmailReportAsync(string TargetUser, EmailReportConfig EmailReportConfig, string EmailAddress = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["EmailReportConfig"] = JsonSerializer.Serialize(EmailReportConfig);
		if (EmailAddress != null) {
			data["EmailAddress"] = EmailAddress;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/preview-user-email-report", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<EmailReportGeneratedPreview>(stream);
			}
		}
	}

	/// <summary>
	/// AdminPreviewUserEmailReport: Preview an email report for a customer
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="EmailReportConfig">Email report configuration to preview</param>
	/// <param name="EmailAddress">(Optional) Email address that may be included in the report body (>= 20.3.3)</param>
	public EmailReportGeneratedPreview AdminPreviewUserEmailReport(string TargetUser, EmailReportConfig EmailReportConfig, string EmailAddress = null) {
		var resultTask = AdminPreviewUserEmailReportAsync(TargetUser, EmailReportConfig, EmailAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminReplicationStateAsync: Get Replication status
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<ReplicatorStateAPIResponse[]> AdminReplicationStateAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/replication/state", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ReplicatorStateAPIResponse[]>(stream);
			}
		}
	}

	/// <summary>
	/// AdminReplicationState: Get Replication status
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public ReplicatorStateAPIResponse[] AdminReplicationState() {
		var resultTask = AdminReplicationStateAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminRequestStorageVaultAsync: Request a new Storage Vault on behalf of a user
	/// This action does not respect the "Prevent creating new Storage Vaults (via Request)" policy setting. New Storage
	/// Vaults can be requested regardless of the policy setting.
	/// Prior to Comet 19.8.0, the response type was CometAPIResponseMessage (i.e. no DestinationID field in response).
	/// The StorageProvider must exist for the target user account's organization.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">The user to receive the new Storage Vault</param>
	/// <param name="StorageProvider">ID for the storage template destination</param>
	/// <param name="SelfAddress">(Optional) The external URL for this server. Used to resolve conflicts</param>
	public async Task<RequestStorageVaultResponseMessage> AdminRequestStorageVaultAsync(string TargetUser, string StorageProvider, string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["StorageProvider"] = StorageProvider;
		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/request-storage-vault", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RequestStorageVaultResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminRequestStorageVault: Request a new Storage Vault on behalf of a user
	/// This action does not respect the "Prevent creating new Storage Vaults (via Request)" policy setting. New Storage
	/// Vaults can be requested regardless of the policy setting.
	/// Prior to Comet 19.8.0, the response type was CometAPIResponseMessage (i.e. no DestinationID field in response).
	/// The StorageProvider must exist for the target user account's organization.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">The user to receive the new Storage Vault</param>
	/// <param name="StorageProvider">ID for the storage template destination</param>
	/// <param name="SelfAddress">(Optional) The external URL for this server. Used to resolve conflicts</param>
	public RequestStorageVaultResponseMessage AdminRequestStorageVault(string TargetUser, string StorageProvider, string SelfAddress = null) {
		var resultTask = AdminRequestStorageVaultAsync(TargetUser, StorageProvider, SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminRequestStorageVaultProvidersAsync: Get the available options for Requesting a Storage Vault
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetOrganization">(Optional) If present, list the storage template options belonging to another
	/// organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public async Task<Dictionary<string,string>> AdminRequestStorageVaultProvidersAsync(string TargetOrganization = null) {
		var data = new Dictionary<string,string>();

		if (TargetOrganization != null) {
			data["TargetOrganization"] = TargetOrganization;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/request-storage-vault-providers", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,string>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminRequestStorageVaultProviders: Get the available options for Requesting a Storage Vault
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetOrganization">(Optional) If present, list the storage template options belonging to another
	/// organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)</param>
	public Dictionary<string,string> AdminRequestStorageVaultProviders(string TargetOrganization = null) {
		var resultTask = AdminRequestStorageVaultProvidersAsync(TargetOrganization);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminResetUserPasswordAsync: Reset user account password
	/// The user account must have a recovery code present. A new replacement recovery code will be generated
	/// automatically.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="NewPassword">New account password</param>
	/// <param name="OldPassword">(Optional) Old account password. Required if no recovery code is present for the user
	/// account.</param>
	public async Task<CometAPIResponseMessage> AdminResetUserPasswordAsync(string TargetUser, string NewPassword, string OldPassword = null) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["NewPassword"] = NewPassword;
		if (OldPassword != null) {
			data["OldPassword"] = OldPassword;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/reset-user-password", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminResetUserPassword: Reset user account password
	/// The user account must have a recovery code present. A new replacement recovery code will be generated
	/// automatically.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="NewPassword">New account password</param>
	/// <param name="OldPassword">(Optional) Old account password. Required if no recovery code is present for the user
	/// account.</param>
	public CometAPIResponseMessage AdminResetUserPassword(string TargetUser, string NewPassword, string OldPassword = null) {
		var resultTask = AdminResetUserPasswordAsync(TargetUser, NewPassword, OldPassword);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminRevokeDeviceAsync: Revoke device from user account
	/// It's possible to simply remove the Device section from the user's profile, however, using this dedicated API will
	/// also gracefully handle live connections.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="TargetDevice">Selected Device ID</param>
	public async Task<CometAPIResponseMessage> AdminRevokeDeviceAsync(string TargetUser, string TargetDevice) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["TargetDevice"] = TargetDevice;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/revoke-device", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminRevokeDevice: Revoke device from user account
	/// It's possible to simply remove the Device section from the user's profile, however, using this dedicated API will
	/// also gracefully handle live connections.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="TargetDevice">Selected Device ID</param>
	public CometAPIResponseMessage AdminRevokeDevice(string TargetUser, string TargetDevice) {
		var resultTask = AdminRevokeDeviceAsync(TargetUser, TargetDevice);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminSelfBackupStartAsync: Run self-backup on all targets
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public async Task<CometAPIResponseMessage> AdminSelfBackupStartAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/self-backup/start", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminSelfBackupStart: Run self-backup on all targets
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	public CometAPIResponseMessage AdminSelfBackupStart() {
		var resultTask = AdminSelfBackupStartAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminSetUserProfileAsync: Modify user account profile
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="ProfileData">Modified user profile</param>
	public async Task<CometAPIResponseMessage> AdminSetUserProfileAsync(string TargetUser, UserProfileConfig ProfileData) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["ProfileData"] = JsonSerializer.Serialize(ProfileData);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/set-user-profile", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminSetUserProfile: Modify user account profile
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="ProfileData">Modified user profile</param>
	public CometAPIResponseMessage AdminSetUserProfile(string TargetUser, UserProfileConfig ProfileData) {
		var resultTask = AdminSetUserProfileAsync(TargetUser, ProfileData);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminSetUserProfileHashAsync: Modify user account profile (atomic)
	/// The hash parameter can be determined from the corresponding API, to atomically ensure that no changes occur between
	/// get/set operations.
	/// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve
	/// current hash values.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="ProfileData">Modified user profile</param>
	/// <param name="RequireHash">Previous hash parameter</param>
	public async Task<CometAPIResponseMessage> AdminSetUserProfileHashAsync(string TargetUser, UserProfileConfig ProfileData, string RequireHash) {
		var data = new Dictionary<string,string>();

		data["TargetUser"] = TargetUser;
		data["ProfileData"] = JsonSerializer.Serialize(ProfileData);
		data["RequireHash"] = RequireHash;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/set-user-profile-hash", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminSetUserProfileHash: Modify user account profile (atomic)
	/// The hash parameter can be determined from the corresponding API, to atomically ensure that no changes occur between
	/// get/set operations.
	/// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve
	/// current hash values.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetUser">Selected account username</param>
	/// <param name="ProfileData">Modified user profile</param>
	/// <param name="RequireHash">Previous hash parameter</param>
	public CometAPIResponseMessage AdminSetUserProfileHash(string TargetUser, UserProfileConfig ProfileData, string RequireHash) {
		var resultTask = AdminSetUserProfileHashAsync(TargetUser, ProfileData, RequireHash);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminStorageBucketPropertiesAsync: Retrieve properties for a single bucket
	/// This API can also be used to refresh the size measurement for a single bucket by passing a valid AfterTimestamp
	/// parameter.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	/// <param name="BucketID">Bucket ID</param>
	/// <param name="AfterTimestamp">(Optional) Allow a stale size measurement if it is at least as new as the supplied
	/// Unix timestamp. Timestamps in the future may produce a result clamped down to the Comet Server's current time. If
	/// not present, the size measurement may be arbitrarily stale.</param>
	public async Task<BucketProperties> AdminStorageBucketPropertiesAsync(string BucketID, Nullable<int> AfterTimestamp = null) {
		var data = new Dictionary<string,string>();

		data["BucketID"] = BucketID;
		if (AfterTimestamp != null) {
			data["AfterTimestamp"] = JsonSerializer.Serialize(AfterTimestamp);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/storage/bucket-properties", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BucketProperties>(stream);
			}
		}
	}

	/// <summary>
	/// AdminStorageBucketProperties: Retrieve properties for a single bucket
	/// This API can also be used to refresh the size measurement for a single bucket by passing a valid AfterTimestamp
	/// parameter.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	/// <param name="BucketID">Bucket ID</param>
	/// <param name="AfterTimestamp">(Optional) Allow a stale size measurement if it is at least as new as the supplied
	/// Unix timestamp. Timestamps in the future may produce a result clamped down to the Comet Server's current time. If
	/// not present, the size measurement may be arbitrarily stale.</param>
	public BucketProperties AdminStorageBucketProperties(string BucketID, Nullable<int> AfterTimestamp = null) {
		var resultTask = AdminStorageBucketPropertiesAsync(BucketID, AfterTimestamp);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminStorageDeleteBucketAsync: Delete a bucket
	/// All data will be removed from the server. Misuse can cause data loss!
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	/// <param name="BucketID">Selected bucket name</param>
	public async Task<CometAPIResponseMessage> AdminStorageDeleteBucketAsync(string BucketID) {
		var data = new Dictionary<string,string>();

		data["BucketID"] = BucketID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/storage/delete-bucket", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminStorageDeleteBucket: Delete a bucket
	/// All data will be removed from the server. Misuse can cause data loss!
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	/// <param name="BucketID">Selected bucket name</param>
	public CometAPIResponseMessage AdminStorageDeleteBucket(string BucketID) {
		var resultTask = AdminStorageDeleteBucketAsync(BucketID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminStorageFreeSpaceAsync: Retrieve available space metrics
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API requires the Storage Role to be enabled.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="BucketID">(Optional) (This parameter is not used)</param>
	public async Task<StorageFreeSpaceInfo> AdminStorageFreeSpaceAsync(string BucketID = null) {
		var data = new Dictionary<string,string>();

		if (BucketID != null) {
			data["BucketID"] = BucketID;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/storage/free-space", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<StorageFreeSpaceInfo>(stream);
			}
		}
	}

	/// <summary>
	/// AdminStorageFreeSpace: Retrieve available space metrics
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API requires the Storage Role to be enabled.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="BucketID">(Optional) (This parameter is not used)</param>
	public StorageFreeSpaceInfo AdminStorageFreeSpace(string BucketID = null) {
		var resultTask = AdminStorageFreeSpaceAsync(BucketID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminStorageListBucketsAsync: List all buckets
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	public async Task<Dictionary<string,BucketProperties>> AdminStorageListBucketsAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/storage/list-buckets", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,BucketProperties>>(stream);
			}
		}
	}

	/// <summary>
	/// AdminStorageListBuckets: List all buckets
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	public Dictionary<string,BucketProperties> AdminStorageListBuckets() {
		var resultTask = AdminStorageListBucketsAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminStoragePingDestinationAsync: Ping a storage destination
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="ExtraData">The destination location settings</param>
	public async Task<CometAPIResponseMessage> AdminStoragePingDestinationAsync(DestinationLocation ExtraData) {
		var data = new Dictionary<string,string>();

		data["ExtraData"] = JsonSerializer.Serialize(ExtraData);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/storage/ping-destination", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminStoragePingDestination: Ping a storage destination
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// Access to this API may be prevented on a per-administrator basis.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// </summary>
	/// <param name="ExtraData">The destination location settings</param>
	public CometAPIResponseMessage AdminStoragePingDestination(DestinationLocation ExtraData) {
		var resultTask = AdminStoragePingDestinationAsync(ExtraData);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminStorageRegisterBucketAsync: Create a new bucket
	/// Leave the Set* parameters blank to generate a bucket with random credentials, or, supply a pre-hashed password for
	/// zero-knowledge operations.
	/// Any auto-generated credentials are returned in the response message.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	/// <param name="SetBucketValue">(Optional) Bucket ID</param>
	/// <param name="SetKeyHashFormat">(Optional) Bucket key hashing format</param>
	/// <param name="SetKeyHashValue">(Optional) Bucket key hash</param>
	/// <param name="SetOrganizationID">(Optional) Target organization ID (>= 20.9.0)</param>
	public async Task<AddBucketResponseMessage> AdminStorageRegisterBucketAsync(string SetBucketValue = null, string SetKeyHashFormat = null, string SetKeyHashValue = null, string SetOrganizationID = null) {
		var data = new Dictionary<string,string>();

		if (SetBucketValue != null) {
			data["SetBucketValue"] = SetBucketValue;
		}
		if (SetKeyHashFormat != null) {
			data["SetKeyHashFormat"] = SetKeyHashFormat;
		}
		if (SetKeyHashValue != null) {
			data["SetKeyHashValue"] = SetKeyHashValue;
		}
		if (SetOrganizationID != null) {
			data["SetOrganizationID"] = SetOrganizationID;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/storage/register-bucket", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<AddBucketResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminStorageRegisterBucket: Create a new bucket
	/// Leave the Set* parameters blank to generate a bucket with random credentials, or, supply a pre-hashed password for
	/// zero-knowledge operations.
	/// Any auto-generated credentials are returned in the response message.
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API requires the Storage Role to be enabled.
	/// </summary>
	/// <param name="SetBucketValue">(Optional) Bucket ID</param>
	/// <param name="SetKeyHashFormat">(Optional) Bucket key hashing format</param>
	/// <param name="SetKeyHashValue">(Optional) Bucket key hash</param>
	/// <param name="SetOrganizationID">(Optional) Target organization ID (>= 20.9.0)</param>
	public AddBucketResponseMessage AdminStorageRegisterBucket(string SetBucketValue = null, string SetKeyHashFormat = null, string SetKeyHashValue = null, string SetOrganizationID = null) {
		var resultTask = AdminStorageRegisterBucketAsync(SetBucketValue, SetKeyHashFormat, SetKeyHashValue, SetOrganizationID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminUpdateCampaignStartAsync: Start a new software update campaign
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Options">Configure targets for the software update campaign</param>
	public async Task<CometAPIResponseMessage> AdminUpdateCampaignStartAsync(UpdateCampaignOptions Options) {
		var data = new Dictionary<string,string>();

		data["Options"] = JsonSerializer.Serialize(Options);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/update-campaign/start", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// AdminUpdateCampaignStart: Start a new software update campaign
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="Options">Configure targets for the software update campaign</param>
	public CometAPIResponseMessage AdminUpdateCampaignStart(UpdateCampaignOptions Options) {
		var resultTask = AdminUpdateCampaignStartAsync(Options);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// AdminUpdateCampaignStatusAsync: Get current campaign status
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<UpdateCampaignStatus> AdminUpdateCampaignStatusAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/admin/update-campaign/status", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<UpdateCampaignStatus>(stream);
			}
		}
	}

	/// <summary>
	/// AdminUpdateCampaignStatus: Get current campaign status
	/// 
	/// You must supply administrator authentication credentials to use this API.
	/// This API is only available for top-level administrator accounts, not for Tenant administrator accounts.
	/// This API requires the Software Build Role to be enabled.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public UpdateCampaignStatus AdminUpdateCampaignStatus() {
		var resultTask = AdminUpdateCampaignStatusAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// BrandingPropsAsync: Retrieve basic information about this Comet Server
	/// </summary>
	public async Task<ServerMetaBrandingProperties> BrandingPropsAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Get, "/gen/branding.props", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<ServerMetaBrandingProperties>(stream);
			}
		}
	}

	/// <summary>
	/// BrandingProps: Retrieve basic information about this Comet Server
	/// </summary>
	public ServerMetaBrandingProperties BrandingProps() {
		var resultTask = BrandingPropsAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// HybridSessionStartAsync: Generate a session key (log in)
	/// This hybrid API allows you to log in to the Comet Server as either an administrator or end-user account.
	/// This API behaves like either AdminAccountSessionStart or UserWebSessionStart, depending on what the supplied
	/// credentials were valid for.
	/// </summary>
	public async Task<SessionKeyRegeneratedResponse> HybridSessionStartAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/hybrid/session/start", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<SessionKeyRegeneratedResponse>(stream);
			}
		}
	}

	/// <summary>
	/// HybridSessionStart: Generate a session key (log in)
	/// This hybrid API allows you to log in to the Comet Server as either an administrator or end-user account.
	/// This API behaves like either AdminAccountSessionStart or UserWebSessionStart, depending on what the supplied
	/// credentials were valid for.
	/// </summary>
	public SessionKeyRegeneratedResponse HybridSessionStart() {
		var resultTask = HybridSessionStartAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserDispatcherEmailPreviewAsync: Request HTML content of an email
	/// The remote device must have given consent for an MSP to browse their mail
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Snapshot">where the email belongs to</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Path">of the email to view</param>
	public async Task<EmailReportGeneratedPreview> UserDispatcherEmailPreviewAsync(string TargetID, string Snapshot, string Destination, string Path) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Snapshot"] = Snapshot;
		data["Destination"] = Destination;
		data["Path"] = Path;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/dispatcher/email-preview", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<EmailReportGeneratedPreview>(stream);
			}
		}
	}

	/// <summary>
	/// UserDispatcherEmailPreview: Request HTML content of an email
	/// The remote device must have given consent for an MSP to browse their mail
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Snapshot">where the email belongs to</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Path">of the email to view</param>
	public EmailReportGeneratedPreview UserDispatcherEmailPreview(string TargetID, string Snapshot, string Destination, string Path) {
		var resultTask = UserDispatcherEmailPreviewAsync(TargetID, Snapshot, Destination, Path);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebAccountRegenerateTotpAsync: Generate a new TOTP secret for user (web)
	/// The secret is returned as a `data-uri` image of a QR code. The new secret is immediately applied to the current
	/// admin account.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileHash">Previous account profile hash</param>
	public async Task<TotpRegeneratedResponse> UserWebAccountRegenerateTotpAsync(string ProfileHash) {
		var data = new Dictionary<string,string>();

		data["ProfileHash"] = ProfileHash;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/account/regenerate-totp", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<TotpRegeneratedResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebAccountRegenerateTotp: Generate a new TOTP secret for user (web)
	/// The secret is returned as a `data-uri` image of a QR code. The new secret is immediately applied to the current
	/// admin account.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileHash">Previous account profile hash</param>
	public TotpRegeneratedResponse UserWebAccountRegenerateTotp(string ProfileHash) {
		var resultTask = UserWebAccountRegenerateTotpAsync(ProfileHash);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebAccountResetPasswordAsync: Reset the password for your own user account (web)
	/// A new replacement recovery code will be generated if the present recovery code is not empty
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileHash">Previous account profile hash</param>
	/// <param name="OldPassword">Current account password</param>
	/// <param name="NewPassword">New account password</param>
	public async Task<CometAPIResponseMessage> UserWebAccountResetPasswordAsync(string ProfileHash, string OldPassword, string NewPassword) {
		var data = new Dictionary<string,string>();

		data["ProfileHash"] = ProfileHash;
		data["OldPassword"] = OldPassword;
		data["NewPassword"] = NewPassword;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/account/reset-password", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebAccountResetPassword: Reset the password for your own user account (web)
	/// A new replacement recovery code will be generated if the present recovery code is not empty
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileHash">Previous account profile hash</param>
	/// <param name="OldPassword">Current account password</param>
	/// <param name="NewPassword">New account password</param>
	public CometAPIResponseMessage UserWebAccountResetPassword(string ProfileHash, string OldPassword, string NewPassword) {
		var resultTask = UserWebAccountResetPasswordAsync(ProfileHash, OldPassword, NewPassword);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebAccountValidateTotpAsync: Validate the TOTP code before turning 2fa(TOTP) on
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileHash">Previous account profile hash</param>
	/// <param name="TOTPCode">Six-digit code after scanning barcode image</param>
	public async Task<CometAPIResponseMessage> UserWebAccountValidateTotpAsync(string ProfileHash, string TOTPCode) {
		var data = new Dictionary<string,string>();

		data["ProfileHash"] = ProfileHash;
		data["TOTPCode"] = TOTPCode;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/account/validate-totp", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebAccountValidateTotp: Validate the TOTP code before turning 2fa(TOTP) on
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileHash">Previous account profile hash</param>
	/// <param name="TOTPCode">Six-digit code after scanning barcode image</param>
	public CometAPIResponseMessage UserWebAccountValidateTotp(string ProfileHash, string TOTPCode) {
		var resultTask = UserWebAccountValidateTotpAsync(ProfileHash, TOTPCode);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherDeleteSnapshotAsync: Instruct a live connected device to delete a stored snapshot
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotID">The backup job snapshot ID to delete</param>
	public async Task<CometAPIResponseMessage> UserWebDispatcherDeleteSnapshotAsync(string TargetID, string DestinationID, string SnapshotID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["DestinationID"] = DestinationID;
		data["SnapshotID"] = SnapshotID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/delete-snapshot", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherDeleteSnapshot: Instruct a live connected device to delete a stored snapshot
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotID">The backup job snapshot ID to delete</param>
	public CometAPIResponseMessage UserWebDispatcherDeleteSnapshot(string TargetID, string DestinationID, string SnapshotID) {
		var resultTask = UserWebDispatcherDeleteSnapshotAsync(TargetID, DestinationID, SnapshotID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherDeleteSnapshotsAsync: Instruct a live connected device to delete multiple stored snapshots
	/// The target device must be running Comet 20.9.10 or later.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">The backup job snapshot IDs to delete</param>
	public async Task<CometAPIResponseMessage> UserWebDispatcherDeleteSnapshotsAsync(string TargetID, string DestinationID, string[] SnapshotIDs) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["DestinationID"] = DestinationID;
		data["SnapshotIDs"] = JsonSerializer.Serialize(SnapshotIDs);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/delete-snapshots", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherDeleteSnapshots: Instruct a live connected device to delete multiple stored snapshots
	/// The target device must be running Comet 20.9.10 or later.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">The backup job snapshot IDs to delete</param>
	public CometAPIResponseMessage UserWebDispatcherDeleteSnapshots(string TargetID, string DestinationID, string[] SnapshotIDs) {
		var resultTask = UserWebDispatcherDeleteSnapshotsAsync(TargetID, DestinationID, SnapshotIDs);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherListActiveAsync: List live connected devices in my account
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<Dictionary<string,LiveUserConnection>> UserWebDispatcherListActiveAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/list-active", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,LiveUserConnection>>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherListActive: List live connected devices in my account
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public Dictionary<string,LiveUserConnection> UserWebDispatcherListActive() {
		var resultTask = UserWebDispatcherListActiveAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherOffice365ListVirtualAccountsAsync: Request a list of Office365 Resources (groups, sites, teams
	/// groups and users)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public async Task<BrowseOffice365ListVirtualAccountsResponse> UserWebDispatcherOffice365ListVirtualAccountsAsync(string TargetID, Office365Credential Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/office365-list-virtual-accounts", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseOffice365ListVirtualAccountsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherOffice365ListVirtualAccounts: Request a list of Office365 Resources (groups, sites, teams groups
	/// and users)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public BrowseOffice365ListVirtualAccountsResponse UserWebDispatcherOffice365ListVirtualAccounts(string TargetID, Office365Credential Credentials) {
		var resultTask = UserWebDispatcherOffice365ListVirtualAccountsAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherPingDestinationAsync: Test the connection to the storage bucket
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="ExtraData">The destination location settings</param>
	public async Task<CometAPIResponseMessage> UserWebDispatcherPingDestinationAsync(string TargetID, DestinationLocation ExtraData) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["ExtraData"] = JsonSerializer.Serialize(ExtraData);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/ping-destination", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherPingDestination: Test the connection to the storage bucket
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="ExtraData">The destination location settings</param>
	public CometAPIResponseMessage UserWebDispatcherPingDestination(string TargetID, DestinationLocation ExtraData) {
		var resultTask = UserWebDispatcherPingDestinationAsync(TargetID, ExtraData);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRegisterOfficeApplicationBeginAsync: Begin the process of registering a new Azure AD application
	/// that can access Office 365 for backup
	/// After calling this API, you should supply the login details to the end-user, and then begin polling the
	/// AdminDispatcherRegisterOfficeApplicationCheck with the supplied "Continuation" parameter to check on the
	/// registration process.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="EmailAddress">The email address of the Azure AD administrator</param>
	public async Task<RegisterOfficeApplicationBeginResponse> UserWebDispatcherRegisterOfficeApplicationBeginAsync(string TargetID, string EmailAddress) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["EmailAddress"] = EmailAddress;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/register-office-application/begin", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RegisterOfficeApplicationBeginResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRegisterOfficeApplicationBegin: Begin the process of registering a new Azure AD application that
	/// can access Office 365 for backup
	/// After calling this API, you should supply the login details to the end-user, and then begin polling the
	/// AdminDispatcherRegisterOfficeApplicationCheck with the supplied "Continuation" parameter to check on the
	/// registration process.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="EmailAddress">The email address of the Azure AD administrator</param>
	public RegisterOfficeApplicationBeginResponse UserWebDispatcherRegisterOfficeApplicationBegin(string TargetID, string EmailAddress) {
		var resultTask = UserWebDispatcherRegisterOfficeApplicationBeginAsync(TargetID, EmailAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRegisterOfficeApplicationCheckAsync: Check the process of registering a new Azure AD application
	/// that can access Office 365 for backup
	/// You should begin the process by calling AdminDispatcherRegisterOfficeApplicationBegin and asking the end-user to
	/// complete the Azure authentication steps.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Continuation">The ID returned from the AdminDispatcherRegisterOfficeApplicationBegin endpoint</param>
	public async Task<RegisterOfficeApplicationCheckResponse> UserWebDispatcherRegisterOfficeApplicationCheckAsync(string TargetID, string Continuation) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Continuation"] = Continuation;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/register-office-application/check", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RegisterOfficeApplicationCheckResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRegisterOfficeApplicationCheck: Check the process of registering a new Azure AD application that
	/// can access Office 365 for backup
	/// You should begin the process by calling AdminDispatcherRegisterOfficeApplicationBegin and asking the end-user to
	/// complete the Azure authentication steps.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Continuation">The ID returned from the AdminDispatcherRegisterOfficeApplicationBegin endpoint</param>
	public RegisterOfficeApplicationCheckResponse UserWebDispatcherRegisterOfficeApplicationCheck(string TargetID, string Continuation) {
		var resultTask = UserWebDispatcherRegisterOfficeApplicationCheckAsync(TargetID, Continuation);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseDiskDrivesAsync: Request a list of physical disk drive information from a live
	/// connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseDiskDrivesResponse> UserWebDispatcherRequestBrowseDiskDrivesAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-disk-drives", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseDiskDrivesResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseDiskDrives: Request a list of physical disk drive information from a live connected
	/// device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseDiskDrivesResponse UserWebDispatcherRequestBrowseDiskDrives(string TargetID) {
		var resultTask = UserWebDispatcherRequestBrowseDiskDrivesAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseExchangeEdbAsync: Request a list of Exchange EDB databases from a live connected
	/// device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseEDBResponse> UserWebDispatcherRequestBrowseExchangeEdbAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-exchange-edb", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseEDBResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseExchangeEdb: Request a list of Exchange EDB databases from a live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseEDBResponse UserWebDispatcherRequestBrowseExchangeEdb(string TargetID) {
		var resultTask = UserWebDispatcherRequestBrowseExchangeEdbAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseHypervAsync: Request a list of Hyper-V virtual machines from a live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseHVResponse> UserWebDispatcherRequestBrowseHypervAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-hyperv", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseHVResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseHyperv: Request a list of Hyper-V virtual machines from a live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseHVResponse UserWebDispatcherRequestBrowseHyperv(string TargetID) {
		var resultTask = UserWebDispatcherRequestBrowseHypervAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseMongodbAsync: Request a list of tables in MongoDB database
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MongoDB database authentication settings</param>
	public async Task<BrowseSQLServerResponse> UserWebDispatcherRequestBrowseMongodbAsync(string TargetID, MongoDBConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-mongodb", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseSQLServerResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseMongodb: Request a list of tables in MongoDB database
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MongoDB database authentication settings</param>
	public BrowseSQLServerResponse UserWebDispatcherRequestBrowseMongodb(string TargetID, MongoDBConnection Credentials) {
		var resultTask = UserWebDispatcherRequestBrowseMongodbAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseMssqlAsync: Request a list of tables in MSSQL database
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MSSQL database authentication settings</param>
	public async Task<BrowseSQLServerResponse> UserWebDispatcherRequestBrowseMssqlAsync(string TargetID, MSSQLConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-mssql", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseSQLServerResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseMssql: Request a list of tables in MSSQL database
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MSSQL database authentication settings</param>
	public BrowseSQLServerResponse UserWebDispatcherRequestBrowseMssql(string TargetID, MSSQLConnection Credentials) {
		var resultTask = UserWebDispatcherRequestBrowseMssqlAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseMysqlAsync: Request a list of tables in MySQL database
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MySQL database authentication settings</param>
	public async Task<BrowseSQLServerResponse> UserWebDispatcherRequestBrowseMysqlAsync(string TargetID, MySQLConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-mysql", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseSQLServerResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseMysql: Request a list of tables in MySQL database
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The MySQL database authentication settings</param>
	public BrowseSQLServerResponse UserWebDispatcherRequestBrowseMysql(string TargetID, MySQLConnection Credentials) {
		var resultTask = UserWebDispatcherRequestBrowseMysqlAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseVmwareAsync: Request a list of VMware vSphere virtual machines
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The VMWare ESXi connection settings</param>
	public async Task<BrowseVMwareResponse> UserWebDispatcherRequestBrowseVmwareAsync(string TargetID, VMwareConnection Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-vmware", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseVMwareResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseVmware: Request a list of VMware vSphere virtual machines
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The VMWare ESXi connection settings</param>
	public BrowseVMwareResponse UserWebDispatcherRequestBrowseVmware(string TargetID, VMwareConnection Credentials) {
		var resultTask = UserWebDispatcherRequestBrowseVmwareAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseVssAawAsync: Request a list of installed VSS Writers (Application-Aware Writers) from
	/// a live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public async Task<BrowseVSSResponse> UserWebDispatcherRequestBrowseVssAawAsync(string TargetID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-browse-vss-aaw", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseVSSResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestBrowseVssAaw: Request a list of installed VSS Writers (Application-Aware Writers) from a
	/// live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	public BrowseVSSResponse UserWebDispatcherRequestBrowseVssAaw(string TargetID) {
		var resultTask = UserWebDispatcherRequestBrowseVssAawAsync(TargetID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestOffice365AccountsAsync: Request a list of Office365 mailbox accounts
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public async Task<BrowseOffice365ObjectsResponse> UserWebDispatcherRequestOffice365AccountsAsync(string TargetID, Office365Credential Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-office365-accounts", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseOffice365ObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestOffice365Accounts: Request a list of Office365 mailbox accounts
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public BrowseOffice365ObjectsResponse UserWebDispatcherRequestOffice365Accounts(string TargetID, Office365Credential Credentials) {
		var resultTask = UserWebDispatcherRequestOffice365AccountsAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestOffice365SitesAsync: Request a list of Office365 sites
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public async Task<BrowseOffice365ObjectsResponse> UserWebDispatcherRequestOffice365SitesAsync(string TargetID, Office365Credential Credentials) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Credentials"] = JsonSerializer.Serialize(Credentials);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-office365-sites", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BrowseOffice365ObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestOffice365Sites: Request a list of Office365 sites
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Credentials">The Office365 account credential</param>
	public BrowseOffice365ObjectsResponse UserWebDispatcherRequestOffice365Sites(string TargetID, Office365Credential Credentials) {
		var resultTask = UserWebDispatcherRequestOffice365SitesAsync(TargetID, Credentials);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestStoredObjectsAsync: Request a list of stored objects inside an existing backup job
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The selected backup job snapshot</param>
	/// <param name="TreeID">(Optional) Browse objects inside subdirectory of backup snapshot. If it is for VMDK single
	/// file restore, it should be the disk image's subtree ID.</param>
	/// <param name="Options">(Optional) Request a list of stored objects in vmdk file</param>
	public async Task<DispatcherStoredObjectsResponse> UserWebDispatcherRequestStoredObjectsAsync(string TargetID, string Destination, string SnapshotID, string TreeID = null, VMDKSnapshotViewOptions Options = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;
		data["SnapshotID"] = SnapshotID;
		if (TreeID != null) {
			data["TreeID"] = TreeID;
		}
		if (Options != null) {
			data["Options"] = JsonSerializer.Serialize(Options);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-stored-objects", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherStoredObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestStoredObjects: Request a list of stored objects inside an existing backup job
	/// The remote device must have given consent for an MSP to browse their files.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The selected backup job snapshot</param>
	/// <param name="TreeID">(Optional) Browse objects inside subdirectory of backup snapshot. If it is for VMDK single
	/// file restore, it should be the disk image's subtree ID.</param>
	/// <param name="Options">(Optional) Request a list of stored objects in vmdk file</param>
	public DispatcherStoredObjectsResponse UserWebDispatcherRequestStoredObjects(string TargetID, string Destination, string SnapshotID, string TreeID = null, VMDKSnapshotViewOptions Options = null) {
		var resultTask = UserWebDispatcherRequestStoredObjectsAsync(TargetID, Destination, SnapshotID, TreeID, Options);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestVaultSnapshotsAsync: Request a list of Storage Vault snapshots from a live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	public async Task<DispatcherVaultSnapshotsResponse> UserWebDispatcherRequestVaultSnapshotsAsync(string TargetID, string Destination) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-vault-snapshots", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherVaultSnapshotsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestVaultSnapshots: Request a list of Storage Vault snapshots from a live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	public DispatcherVaultSnapshotsResponse UserWebDispatcherRequestVaultSnapshots(string TargetID, string Destination) {
		var resultTask = UserWebDispatcherRequestVaultSnapshotsAsync(TargetID, Destination);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRequestWindiskSnapshotAsync: Request a Disk Image snapshot with the windiskbrowse-style from a
	/// live connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The Snapshot ID</param>
	public async Task<DispatcherWindiskSnapshotResponse> UserWebDispatcherRequestWindiskSnapshotAsync(string TargetID, string Destination, string SnapshotID) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Destination"] = Destination;
		data["SnapshotID"] = SnapshotID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/request-windisk-snapshot", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherWindiskSnapshotResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRequestWindiskSnapshot: Request a Disk Image snapshot with the windiskbrowse-style from a live
	/// connected device
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="SnapshotID">The Snapshot ID</param>
	public DispatcherWindiskSnapshotResponse UserWebDispatcherRequestWindiskSnapshot(string TargetID, string Destination, string SnapshotID) {
		var resultTask = UserWebDispatcherRequestWindiskSnapshotAsync(TargetID, Destination, SnapshotID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRunBackupAsync: Instruct a live connected device in my account to run a scheduled backup
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="BackupRule">The schedule GUID</param>
	public async Task<CometAPIResponseMessage> UserWebDispatcherRunBackupAsync(string TargetID, string BackupRule) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["BackupRule"] = BackupRule;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/run-backup", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRunBackup: Instruct a live connected device in my account to run a scheduled backup
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="BackupRule">The schedule GUID</param>
	public CometAPIResponseMessage UserWebDispatcherRunBackup(string TargetID, string BackupRule) {
		var resultTask = UserWebDispatcherRunBackupAsync(TargetID, BackupRule);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRunBackupCustomAsync: Instruct a live connected device to run a backup
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	/// <param name="Options">(Optional) Extra job parameters (>= 19.3.6)</param>
	public async Task<CometAPIResponseMessage> UserWebDispatcherRunBackupCustomAsync(string TargetID, string Source, string Destination, BackupJobAdvancedOptions Options = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Source"] = Source;
		data["Destination"] = Destination;
		if (Options != null) {
			data["Options"] = JsonSerializer.Serialize(Options);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/run-backup-custom", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRunBackupCustom: Instruct a live connected device to run a backup
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item GUID</param>
	/// <param name="Destination">The Storage Vault GUID</param>
	/// <param name="Options">(Optional) Extra job parameters (>= 19.3.6)</param>
	public CometAPIResponseMessage UserWebDispatcherRunBackupCustom(string TargetID, string Source, string Destination, BackupJobAdvancedOptions Options = null) {
		var resultTask = UserWebDispatcherRunBackupCustomAsync(TargetID, Source, Destination, Options);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRunRestoreAsync: Instruct a live connected device in my account to perform a local restore
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">The local path to restore to</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data (>=
	/// 19.3.0)</param>
	public async Task<CometAPIResponseMessage> UserWebDispatcherRunRestoreAsync(string TargetID, string Path, string Source, string Destination, string Snapshot = null, string[] Paths = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Path"] = Path;
		data["Source"] = Source;
		data["Destination"] = Destination;
		if (Snapshot != null) {
			data["Snapshot"] = Snapshot;
		}
		if (Paths != null) {
			data["Paths"] = JsonSerializer.Serialize(Paths);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/run-restore", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRunRestore: Instruct a live connected device in my account to perform a local restore
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">The local path to restore to</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data (>=
	/// 19.3.0)</param>
	public CometAPIResponseMessage UserWebDispatcherRunRestore(string TargetID, string Path, string Source, string Destination, string Snapshot = null, string[] Paths = null) {
		var resultTask = UserWebDispatcherRunRestoreAsync(TargetID, Path, Source, Destination, Snapshot, Paths);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherRunRestoreCustomAsync: Instruct a live connected device in my account to perform a local restore
	/// This command is understood by Comet Backup 18.6.0 and newer.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Options">Restore targets</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data (>=
	/// 19.3.0)</param>
	/// <param name="KnownFileCount">(Optional) The number of files to restore, if known. Supplying this means we don't
	/// need to walk the entire tree just to find the file count and will speed up the restoration process.</param>
	/// <param name="KnownByteCount">(Optional) The total size in bytes of files to restore, if known. Supplying this means
	/// we don't need to walk the entire tree just to find the total file size and will speed up the restoration
	/// process.</param>
	/// <param name="KnownDirCount">(Optional) The number of directories to restore, if known. Supplying this means we
	/// don't need to walk the entire tree just to find the number of directories and will speed up the restoration
	/// process.</param>
	public async Task<CometAPIResponseMessage> UserWebDispatcherRunRestoreCustomAsync(string TargetID, string Source, string Destination, RestoreJobAdvancedOptions Options, string Snapshot = null, string[] Paths = null, Nullable<int> KnownFileCount = null, Nullable<int> KnownByteCount = null, Nullable<int> KnownDirCount = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["Source"] = Source;
		data["Destination"] = Destination;
		data["Options"] = JsonSerializer.Serialize(Options);
		if (Snapshot != null) {
			data["Snapshot"] = Snapshot;
		}
		if (Paths != null) {
			data["Paths"] = JsonSerializer.Serialize(Paths);
		}
		if (KnownFileCount != null) {
			data["KnownFileCount"] = JsonSerializer.Serialize(KnownFileCount);
		}
		if (KnownByteCount != null) {
			data["KnownByteCount"] = JsonSerializer.Serialize(KnownByteCount);
		}
		if (KnownDirCount != null) {
			data["KnownDirCount"] = JsonSerializer.Serialize(KnownDirCount);
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/run-restore-custom", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherRunRestoreCustom: Instruct a live connected device in my account to perform a local restore
	/// This command is understood by Comet Backup 18.6.0 and newer.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Source">The Protected Item ID</param>
	/// <param name="Destination">The Storage Vault ID</param>
	/// <param name="Options">Restore targets</param>
	/// <param name="Snapshot">(Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot
	/// for the selected Protected Item + Storage Vault pair</param>
	/// <param name="Paths">(Optional) If present, restore these paths only. Otherwise, restore all data (>=
	/// 19.3.0)</param>
	/// <param name="KnownFileCount">(Optional) The number of files to restore, if known. Supplying this means we don't
	/// need to walk the entire tree just to find the file count and will speed up the restoration process.</param>
	/// <param name="KnownByteCount">(Optional) The total size in bytes of files to restore, if known. Supplying this means
	/// we don't need to walk the entire tree just to find the total file size and will speed up the restoration
	/// process.</param>
	/// <param name="KnownDirCount">(Optional) The number of directories to restore, if known. Supplying this means we
	/// don't need to walk the entire tree just to find the number of directories and will speed up the restoration
	/// process.</param>
	public CometAPIResponseMessage UserWebDispatcherRunRestoreCustom(string TargetID, string Source, string Destination, RestoreJobAdvancedOptions Options, string Snapshot = null, string[] Paths = null, Nullable<int> KnownFileCount = null, Nullable<int> KnownByteCount = null, Nullable<int> KnownDirCount = null) {
		var resultTask = UserWebDispatcherRunRestoreCustomAsync(TargetID, Source, Destination, Options, Snapshot, Paths, KnownFileCount, KnownByteCount, KnownDirCount);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebDispatcherSearchSnapshotsAsync: Search storage vault snapshots
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">Snapshots to search</param>
	/// <param name="Filter">The search filter</param>
	public async Task<SearchSnapshotsResponse> UserWebDispatcherSearchSnapshotsAsync(string TargetID, string DestinationID, string[] SnapshotIDs, SearchClause Filter) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		data["DestinationID"] = DestinationID;
		data["SnapshotIDs"] = JsonSerializer.Serialize(SnapshotIDs);
		data["Filter"] = JsonSerializer.Serialize(Filter);

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/dispatcher/search-snapshots", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<SearchSnapshotsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebDispatcherSearchSnapshots: Search storage vault snapshots
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="DestinationID">The Storage Vault GUID</param>
	/// <param name="SnapshotIDs">Snapshots to search</param>
	/// <param name="Filter">The search filter</param>
	public SearchSnapshotsResponse UserWebDispatcherSearchSnapshots(string TargetID, string DestinationID, string[] SnapshotIDs, SearchClause Filter) {
		var resultTask = UserWebDispatcherSearchSnapshotsAsync(TargetID, DestinationID, SnapshotIDs, Filter);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebGetJobLogAsync: Get backup job report log, in plaintext format (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job GUID</param>
	public async Task<byte[]> UserWebGetJobLogAsync(string JobID) {
		var data = new Dictionary<string,string>();

		data["JobID"] = JobID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/get-job-log", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				MemoryStream mStream = new MemoryStream();
				await stream.CopyToAsync(mStream);
				return mStream.ToArray();
			}
		}
	}

	/// <summary>
	/// UserWebGetJobLog: Get backup job report log, in plaintext format (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job GUID</param>
	public byte[] UserWebGetJobLog(string JobID) {
		var resultTask = UserWebGetJobLogAsync(JobID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebGetJobLogEntriesAsync: Get backup job report log (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job GUID</param>
	/// <param name="MinSeverity">(Optional) Return only job log entries with equal or higher severity</param>
	/// <param name="MessageContains">(Optional) Return only job log entries that contain exact string</param>
	public async Task<JobEntry[]> UserWebGetJobLogEntriesAsync(string JobID, string MinSeverity = null, string MessageContains = null) {
		var data = new Dictionary<string,string>();

		data["JobID"] = JobID;
		if (MinSeverity != null) {
			data["MinSeverity"] = MinSeverity;
		}
		if (MessageContains != null) {
			data["MessageContains"] = MessageContains;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/get-job-log-entries", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<JobEntry[]>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebGetJobLogEntries: Get backup job report log (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job GUID</param>
	/// <param name="MinSeverity">(Optional) Return only job log entries with equal or higher severity</param>
	/// <param name="MessageContains">(Optional) Return only job log entries that contain exact string</param>
	public JobEntry[] UserWebGetJobLogEntries(string JobID, string MinSeverity = null, string MessageContains = null) {
		var resultTask = UserWebGetJobLogEntriesAsync(JobID, MinSeverity, MessageContains);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebGetJobPropertiesAsync: Get backup job properties (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job GUID</param>
	public async Task<BackupJobDetail> UserWebGetJobPropertiesAsync(string JobID) {
		var data = new Dictionary<string,string>();

		data["JobID"] = JobID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/get-job-properties", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebGetJobProperties: Get backup job properties (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Selected job GUID</param>
	public BackupJobDetail UserWebGetJobProperties(string JobID) {
		var resultTask = UserWebGetJobPropertiesAsync(JobID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebGetJobsAsync: List all backup jobs (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<BackupJobDetail[]> UserWebGetJobsAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/get-jobs", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail[]>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebGetJobs: List all backup jobs (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public BackupJobDetail[] UserWebGetJobs() {
		var resultTask = UserWebGetJobsAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebGetJobsForCustomSearchAsync: List all backup jobs (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<BackupJobDetail[]> UserWebGetJobsForCustomSearchAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/get-jobs-for-custom-search", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<BackupJobDetail[]>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebGetJobsForCustomSearch: List all backup jobs (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public BackupJobDetail[] UserWebGetJobsForCustomSearch() {
		var resultTask = UserWebGetJobsForCustomSearchAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebGetUserProfileAndHashAsync: Get user account profile (atomic)
	/// (Web interface version)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<GetProfileAndHashResponseMessage> UserWebGetUserProfileAndHashAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/get-user-profile-and-hash", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<GetProfileAndHashResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebGetUserProfileAndHash: Get user account profile (atomic)
	/// (Web interface version)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public GetProfileAndHashResponseMessage UserWebGetUserProfileAndHash() {
		var resultTask = UserWebGetUserProfileAndHashAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebJobCancelAsync: Cancel a running job
	/// A request is sent to the live-connected device, asking it to cancel the operation. This may fail if there is no
	/// live-connection.
	/// Only jobs from Comet 18.3.5 or newer can be cancelled. A job can only be cancelled if it has a non-empty
	/// CancellationID field in its properties.
	/// If the device is running Comet 21.9.5 or later, this API will wait up to ten seconds for a confirmation from the
	/// client.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Job ID</param>
	public async Task<CometAPIResponseMessage> UserWebJobCancelAsync(string JobID) {
		var data = new Dictionary<string,string>();

		data["JobID"] = JobID;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/job/cancel", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebJobCancel: Cancel a running job
	/// A request is sent to the live-connected device, asking it to cancel the operation. This may fail if there is no
	/// live-connection.
	/// Only jobs from Comet 18.3.5 or newer can be cancelled. A job can only be cancelled if it has a non-empty
	/// CancellationID field in its properties.
	/// If the device is running Comet 21.9.5 or later, this API will wait up to ten seconds for a confirmation from the
	/// client.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="JobID">Job ID</param>
	public CometAPIResponseMessage UserWebJobCancel(string JobID) {
		var resultTask = UserWebJobCancelAsync(JobID);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebNewsGetAllAsync: Get News entries (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<Dictionary<string,NewsEntry>> UserWebNewsGetAllAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/news/get-all", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,NewsEntry>>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebNewsGetAll: Get News entries (Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public Dictionary<string,NewsEntry> UserWebNewsGetAll() {
		var resultTask = UserWebNewsGetAllAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebRequestFilesystemObjectsAsync: Request a list of filesystem objects from the device
	/// The device must have granted the administrator permission to view its filenames.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">(Optional) Browse objects inside this path. If empty or not present, returns the top-level
	/// device paths</param>
	public async Task<DispatcherStoredObjectsResponse> UserWebRequestFilesystemObjectsAsync(string TargetID, string Path = null) {
		var data = new Dictionary<string,string>();

		data["TargetID"] = TargetID;
		if (Path != null) {
			data["Path"] = Path;
		}

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/request-filesystem-objects", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<DispatcherStoredObjectsResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebRequestFilesystemObjects: Request a list of filesystem objects from the device
	/// The device must have granted the administrator permission to view its filenames.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="TargetID">The live connection GUID</param>
	/// <param name="Path">(Optional) Browse objects inside this path. If empty or not present, returns the top-level
	/// device paths</param>
	public DispatcherStoredObjectsResponse UserWebRequestFilesystemObjects(string TargetID, string Path = null) {
		var resultTask = UserWebRequestFilesystemObjectsAsync(TargetID, Path);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebRequestStorageVaultAsync: Request a new Storage Vault (Web)
	/// This action can be prevented via policy.
	/// Prior to Comet 19.8.0, the response type was CometAPIResponseMessage (i.e. no DestinationID field in response).
	/// The StorageProvider must exist for the target user account's organization.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="StorageProvider">ID for the storage template destination</param>
	/// <param name="SelfAddress">(Optional) The external URL for this server. Used to resolve conflicts</param>
	public async Task<RequestStorageVaultResponseMessage> UserWebRequestStorageVaultAsync(string StorageProvider, string SelfAddress = null) {
		var data = new Dictionary<string,string>();

		data["StorageProvider"] = StorageProvider;
		data["SelfAddress"] = SelfAddress ?? this.ServerURL;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/request-storage-vault", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<RequestStorageVaultResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebRequestStorageVault: Request a new Storage Vault (Web)
	/// This action can be prevented via policy.
	/// Prior to Comet 19.8.0, the response type was CometAPIResponseMessage (i.e. no DestinationID field in response).
	/// The StorageProvider must exist for the target user account's organization.
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="StorageProvider">ID for the storage template destination</param>
	/// <param name="SelfAddress">(Optional) The external URL for this server. Used to resolve conflicts</param>
	public RequestStorageVaultResponseMessage UserWebRequestStorageVault(string StorageProvider, string SelfAddress = null) {
		var resultTask = UserWebRequestStorageVaultAsync(StorageProvider, SelfAddress);
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebRequestStorageVaultProvidersAsync: Get the available options for Requesting a Storage Vault (User Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<Dictionary<string,string>> UserWebRequestStorageVaultProvidersAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/request-storage-vault-providers", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<Dictionary<string,string>>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebRequestStorageVaultProviders: Get the available options for Requesting a Storage Vault (User Web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public Dictionary<string,string> UserWebRequestStorageVaultProviders() {
		var resultTask = UserWebRequestStorageVaultProvidersAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebSessionRevokeAsync: Revoke a session key (log out)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<CometAPIResponseMessage> UserWebSessionRevokeAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/session/revoke", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebSessionRevoke: Revoke a session key (log out)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public CometAPIResponseMessage UserWebSessionRevoke() {
		var resultTask = UserWebSessionRevokeAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebSessionStartAsync: Generate a session key (log in)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public async Task<SessionKeyRegeneratedResponse> UserWebSessionStartAsync() {
		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/session/start", null)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<SessionKeyRegeneratedResponse>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebSessionStart: Generate a session key (log in)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	public SessionKeyRegeneratedResponse UserWebSessionStart() {
		var resultTask = UserWebSessionStartAsync();
		resultTask.Wait();
		return resultTask.Result;
	}

	/// <summary>
	/// UserWebSetProfileHashAsync: Set account profile (atomic, web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileData">Updated account profile</param>
	/// <param name="ProfileHash">Previous account profile hash</param>
	public async Task<CometAPIResponseMessage> UserWebSetProfileHashAsync(UserProfileConfig ProfileData, string ProfileHash) {
		var data = new Dictionary<string,string>();

		data["ProfileData"] = JsonSerializer.Serialize(ProfileData);
		data["ProfileHash"] = ProfileHash;

		using(var response = await this.Request("application/x-www-form-urlencoded", HttpMethod.Post, "/api/v1/user/web/set-profile-hash", data)){
			response.EnsureSuccessStatusCode();
			using(var stream = await response.Content.ReadAsStreamAsync()){
				return await JsonSerializer.DeserializeAsync<CometAPIResponseMessage>(stream);
			}
		}
	}

	/// <summary>
	/// UserWebSetProfileHash: Set account profile (atomic, web)
	/// 
	/// You must supply user authentication credentials to use this API, and the user account must be authorized for web
	/// access.
	/// This API requires the Auth Role to be enabled.
	/// </summary>
	/// <param name="ProfileData">Updated account profile</param>
	/// <param name="ProfileHash">Previous account profile hash</param>
	public CometAPIResponseMessage UserWebSetProfileHash(UserProfileConfig ProfileData, string ProfileHash) {
		var resultTask = UserWebSetProfileHashAsync(ProfileData, ProfileHash);
		resultTask.Wait();
		return resultTask.Result;
	}

}
}
